ERROR:netconf.server:Deleting NetconfSSHServer(port=830)
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f2d06f3f750>: ('::ffff:192.168.50.1', 56358, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x68867d0L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 56358, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
INFO:dicttoxml:Inside dicttoxml(): type(obj) is: "dict", obj="{u'memory': 1981648, u'uptime': u'6:41:12.130000', u'hostname': u'cumulus', u'platform': {u'detected': True, u'vendor': u'Cumulus', u'model': u'VX'}, u'build': u'Cumulus Linux 3.7.9', u'os-version': u'3.7.9', u'disk': u'30G', u'lsb-release': u'DISTRIB_ID="Cumulus Linux"\nDISTRIB_RELEASE=3.7.9\nDISTRIB_DESCRIPTION="Cumulus Linux 3.7.9"\n', u'os-description': u'Cumulus Linux 3.7.9', u'eeprom': {u'idString': u'TlvInfo', u'totalLength': 69, u'version': 1, u'tlv': {u'Part Number': {u'index': 36, u'length': 5, u'code': u'0x22', u'value': u'3.7.9'}, u'CRC-32': {u'index': 74, u'length': 4, u'code': u'0xFE', u'value': u'0x82F97EE8'}, u'Device Version': {u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}, u'Serial Number': {u'index': 55, u'length': 17, u'code': u'0x23', u'value': u'00:0c:29:cd:8e:29'}, u'Product Name': {u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}, u'MAC Addresses': {u'index': 43, u'length': 2, u'code': u'0x2A', u'value': u'6'}, u'Base MAC Address': {u'index': 47, u'length': 6, u'code': u'0x24', u'value': u'00:0C:29:CD:8E:29'}, u'Vendor Name': {u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}}, u'validTlvInfoHeader': True}}"
INFO:dicttoxml:Inside convert(). obj type is: "dict", obj="{u'memory': 1981648, u'uptime': u'6:41:12.130000', u'hostname': u'cumulus', u'platform': {u'detected': True, u'vendor': u'Cumulus', u'model': u'VX'}, u'build': u'Cumulus Linux 3.7.9', u'os-version': u'3.7.9', u'disk': u'30G', u'lsb-release': u'DISTRIB_ID="Cumulus Linux"\nDISTRIB_RELEASE=3.7.9\nDISTRIB_DESCRIPTION="Cumulus Linux 3.7.9"\n', u'os-description': u'Cumulus Linux 3.7.9', u'eeprom': {u'idString': u'TlvInfo', u'totalLength': 69, u'version': 1, u'tlv': {u'Part Number': {u'index': 36, u'length': 5, u'code': u'0x22', u'value': u'3.7.9'}, u'CRC-32': {u'index': 74, u'length': 4, u'code': u'0xFE', u'value': u'0x82F97EE8'}, u'Device Version': {u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}, u'Serial Number': {u'index': 55, u'length': 17, u'code': u'0x23', u'value': u'00:0c:29:cd:8e:29'}, u'Product Name': {u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}, u'MAC Addresses': {u'index': 43, u'length': 2, u'code': u'0x2A', u'value': u'6'}, u'Base MAC Address': {u'index': 47, u'length': 6, u'code': u'0x24', u'value': u'00:0C:29:CD:8E:29'}, u'Vendor Name': {u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}}, u'validTlvInfoHeader': True}}"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'memory': 1981648, u'uptime': u'6:41:12.130000', u'hostname': u'cumulus', u'platform': {u'detected': True, u'vendor': u'Cumulus', u'model': u'VX'}, u'build': u'Cumulus Linux 3.7.9', u'os-version': u'3.7.9', u'disk': u'30G', u'lsb-release': u'DISTRIB_ID="Cumulus Linux"\nDISTRIB_RELEASE=3.7.9\nDISTRIB_DESCRIPTION="Cumulus Linux 3.7.9"\n', u'os-description': u'Cumulus Linux 3.7.9', u'eeprom': {u'idString': u'TlvInfo', u'totalLength': 69, u'version': 1, u'tlv': {u'Part Number': {u'index': 36, u'length': 5, u'code': u'0x22', u'value': u'3.7.9'}, u'CRC-32': {u'index': 74, u'length': 4, u'code': u'0xFE', u'value': u'0x82F97EE8'}, u'Device Version': {u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}, u'Serial Number': {u'index': 55, u'length': 17, u'code': u'0x23', u'value': u'00:0c:29:cd:8e:29'}, u'Product Name': {u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}, u'MAC Addresses': {u'index': 43, u'length': 2, u'code': u'0x2A', u'value': u'6'}, u'Base MAC Address': {u'index': 47, u'length': 6, u'code': u'0x24', u'value': u'00:0C:29:CD:8E:29'}, u'Vendor Name': {u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}}, u'validTlvInfoHeader': True}}"
INFO:dicttoxml:Looping inside convert_dict(): key="memory", val="1981648", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "memory" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "memory"
INFO:dicttoxml:Inside convert_kv(): key="memory", val="1981648", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "memory" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "memory"
INFO:dicttoxml:Looping inside convert_dict(): key="uptime", val="6:41:12.130000", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "uptime" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "uptime"
INFO:dicttoxml:Inside convert_kv(): key="uptime", val="6:41:12.130000", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "uptime" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "uptime"
INFO:dicttoxml:Looping inside convert_dict(): key="hostname", val="cumulus", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "hostname" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "hostname"
INFO:dicttoxml:Inside convert_kv(): key="hostname", val="cumulus", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "hostname" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "hostname"
INFO:dicttoxml:Looping inside convert_dict(): key="platform", val="{u'detected': True, u'vendor': u'Cumulus', u'model': u'VX'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "platform" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "platform"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'detected': True, u'vendor': u'Cumulus', u'model': u'VX'}"
INFO:dicttoxml:Looping inside convert_dict(): key="detected", val="True", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "detected" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "detected"
INFO:dicttoxml:Inside convert_kv(): key="detected", val="True", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "detected" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "detected"
INFO:dicttoxml:Looping inside convert_dict(): key="vendor", val="Cumulus", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vendor" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vendor"
INFO:dicttoxml:Inside convert_kv(): key="vendor", val="Cumulus", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vendor" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vendor"
INFO:dicttoxml:Looping inside convert_dict(): key="model", val="VX", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "model" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "model"
INFO:dicttoxml:Inside convert_kv(): key="model", val="VX", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "model" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "model"
INFO:dicttoxml:Looping inside convert_dict(): key="build", val="Cumulus Linux 3.7.9", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "build" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "build"
INFO:dicttoxml:Inside convert_kv(): key="build", val="Cumulus Linux 3.7.9", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "build" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "build"
INFO:dicttoxml:Looping inside convert_dict(): key="os-version", val="3.7.9", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "os-version" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "os-version"
INFO:dicttoxml:Inside convert_kv(): key="os-version", val="3.7.9", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "os-version" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "os-version"
INFO:dicttoxml:Looping inside convert_dict(): key="disk", val="30G", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "disk" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "disk"
INFO:dicttoxml:Inside convert_kv(): key="disk", val="30G", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "disk" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "disk"
INFO:dicttoxml:Looping inside convert_dict(): key="lsb-release", val="DISTRIB_ID="Cumulus Linux"
DISTRIB_RELEASE=3.7.9
DISTRIB_DESCRIPTION="Cumulus Linux 3.7.9"
", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lsb-release" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lsb-release"
INFO:dicttoxml:Inside convert_kv(): key="lsb-release", val="DISTRIB_ID="Cumulus Linux"
DISTRIB_RELEASE=3.7.9
DISTRIB_DESCRIPTION="Cumulus Linux 3.7.9"
", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lsb-release" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lsb-release"
INFO:dicttoxml:Looping inside convert_dict(): key="os-description", val="Cumulus Linux 3.7.9", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "os-description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "os-description"
INFO:dicttoxml:Inside convert_kv(): key="os-description", val="Cumulus Linux 3.7.9", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "os-description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "os-description"
INFO:dicttoxml:Looping inside convert_dict(): key="eeprom", val="{u'idString': u'TlvInfo', u'totalLength': 69, u'version': 1, u'tlv': {u'Part Number': {u'index': 36, u'length': 5, u'code': u'0x22', u'value': u'3.7.9'}, u'CRC-32': {u'index': 74, u'length': 4, u'code': u'0xFE', u'value': u'0x82F97EE8'}, u'Device Version': {u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}, u'Serial Number': {u'index': 55, u'length': 17, u'code': u'0x23', u'value': u'00:0c:29:cd:8e:29'}, u'Product Name': {u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}, u'MAC Addresses': {u'index': 43, u'length': 2, u'code': u'0x2A', u'value': u'6'}, u'Base MAC Address': {u'index': 47, u'length': 6, u'code': u'0x24', u'value': u'00:0C:29:CD:8E:29'}, u'Vendor Name': {u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}}, u'validTlvInfoHeader': True}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "eeprom" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "eeprom"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'idString': u'TlvInfo', u'totalLength': 69, u'version': 1, u'tlv': {u'Part Number': {u'index': 36, u'length': 5, u'code': u'0x22', u'value': u'3.7.9'}, u'CRC-32': {u'index': 74, u'length': 4, u'code': u'0xFE', u'value': u'0x82F97EE8'}, u'Device Version': {u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}, u'Serial Number': {u'index': 55, u'length': 17, u'code': u'0x23', u'value': u'00:0c:29:cd:8e:29'}, u'Product Name': {u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}, u'MAC Addresses': {u'index': 43, u'length': 2, u'code': u'0x2A', u'value': u'6'}, u'Base MAC Address': {u'index': 47, u'length': 6, u'code': u'0x24', u'value': u'00:0C:29:CD:8E:29'}, u'Vendor Name': {u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}}, u'validTlvInfoHeader': True}"
INFO:dicttoxml:Looping inside convert_dict(): key="idString", val="TlvInfo", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "idString" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "idString"
INFO:dicttoxml:Inside convert_kv(): key="idString", val="TlvInfo", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "idString" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "idString"
INFO:dicttoxml:Looping inside convert_dict(): key="totalLength", val="69", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "totalLength" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "totalLength"
INFO:dicttoxml:Inside convert_kv(): key="totalLength", val="69", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "totalLength" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "totalLength"
INFO:dicttoxml:Looping inside convert_dict(): key="version", val="1", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "version" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "version"
INFO:dicttoxml:Inside convert_kv(): key="version", val="1", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "version" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "version"
INFO:dicttoxml:Looping inside convert_dict(): key="tlv", val="{u'Part Number': {u'index': 36, u'length': 5, u'code': u'0x22', u'value': u'3.7.9'}, u'CRC-32': {u'index': 74, u'length': 4, u'code': u'0xFE', u'value': u'0x82F97EE8'}, u'Device Version': {u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}, u'Serial Number': {u'index': 55, u'length': 17, u'code': u'0x23', u'value': u'00:0c:29:cd:8e:29'}, u'Product Name': {u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}, u'MAC Addresses': {u'index': 43, u'length': 2, u'code': u'0x2A', u'value': u'6'}, u'Base MAC Address': {u'index': 47, u'length': 6, u'code': u'0x24', u'value': u'00:0C:29:CD:8E:29'}, u'Vendor Name': {u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "tlv" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "tlv"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'Part Number': {u'index': 36, u'length': 5, u'code': u'0x22', u'value': u'3.7.9'}, u'CRC-32': {u'index': 74, u'length': 4, u'code': u'0xFE', u'value': u'0x82F97EE8'}, u'Device Version': {u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}, u'Serial Number': {u'index': 55, u'length': 17, u'code': u'0x23', u'value': u'00:0c:29:cd:8e:29'}, u'Product Name': {u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}, u'MAC Addresses': {u'index': 43, u'length': 2, u'code': u'0x2A', u'value': u'6'}, u'Base MAC Address': {u'index': 47, u'length': 6, u'code': u'0x24', u'value': u'00:0C:29:CD:8E:29'}, u'Vendor Name': {u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}}"
INFO:dicttoxml:Looping inside convert_dict(): key="Part Number", val="{u'index': 36, u'length': 5, u'code': u'0x22', u'value': u'3.7.9'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Part Number" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Part Number"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Part_Number"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'index': 36, u'length': 5, u'code': u'0x22', u'value': u'3.7.9'}"
INFO:dicttoxml:Looping inside convert_dict(): key="index", val="36", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Inside convert_kv(): key="index", val="36", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Looping inside convert_dict(): key="length", val="5", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Inside convert_kv(): key="length", val="5", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Looping inside convert_dict(): key="code", val="0x22", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Inside convert_kv(): key="code", val="0x22", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Looping inside convert_dict(): key="value", val="3.7.9", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Inside convert_kv(): key="value", val="3.7.9", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Looping inside convert_dict(): key="CRC-32", val="{u'index': 74, u'length': 4, u'code': u'0xFE', u'value': u'0x82F97EE8'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "CRC-32" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "CRC-32"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'index': 74, u'length': 4, u'code': u'0xFE', u'value': u'0x82F97EE8'}"
INFO:dicttoxml:Looping inside convert_dict(): key="index", val="74", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Inside convert_kv(): key="index", val="74", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Looping inside convert_dict(): key="length", val="4", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Inside convert_kv(): key="length", val="4", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Looping inside convert_dict(): key="code", val="0xFE", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Inside convert_kv(): key="code", val="0xFE", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Looping inside convert_dict(): key="value", val="0x82F97EE8", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Inside convert_kv(): key="value", val="0x82F97EE8", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Looping inside convert_dict(): key="Device Version", val="{u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Device Version" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Device Version"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Device_Version"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}"
INFO:dicttoxml:Looping inside convert_dict(): key="index", val="33", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Inside convert_kv(): key="index", val="33", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Looping inside convert_dict(): key="length", val="1", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Inside convert_kv(): key="length", val="1", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Looping inside convert_dict(): key="code", val="0x26", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Inside convert_kv(): key="code", val="0x26", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Looping inside convert_dict(): key="value", val="3", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Inside convert_kv(): key="value", val="3", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Looping inside convert_dict(): key="Serial Number", val="{u'index': 55, u'length': 17, u'code': u'0x23', u'value': u'00:0c:29:cd:8e:29'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Serial Number" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Serial Number"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Serial_Number"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'index': 55, u'length': 17, u'code': u'0x23', u'value': u'00:0c:29:cd:8e:29'}"
INFO:dicttoxml:Looping inside convert_dict(): key="index", val="55", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Inside convert_kv(): key="index", val="55", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Looping inside convert_dict(): key="length", val="17", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Inside convert_kv(): key="length", val="17", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Looping inside convert_dict(): key="code", val="0x23", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Inside convert_kv(): key="code", val="0x23", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Looping inside convert_dict(): key="value", val="00:0c:29:cd:8e:29", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Inside convert_kv(): key="value", val="00:0c:29:cd:8e:29", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Looping inside convert_dict(): key="Product Name", val="{u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Product Name" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Product Name"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Product_Name"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}"
INFO:dicttoxml:Looping inside convert_dict(): key="index", val="29", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Inside convert_kv(): key="index", val="29", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Looping inside convert_dict(): key="length", val="2", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Inside convert_kv(): key="length", val="2", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Looping inside convert_dict(): key="code", val="0x21", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Inside convert_kv(): key="code", val="0x21", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Looping inside convert_dict(): key="value", val="VX", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Inside convert_kv(): key="value", val="VX", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Looping inside convert_dict(): key="MAC Addresses", val="{u'index': 43, u'length': 2, u'code': u'0x2A', u'value': u'6'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "MAC Addresses" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MAC Addresses"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MAC_Addresses"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'index': 43, u'length': 2, u'code': u'0x2A', u'value': u'6'}"
INFO:dicttoxml:Looping inside convert_dict(): key="index", val="43", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Inside convert_kv(): key="index", val="43", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Looping inside convert_dict(): key="length", val="2", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Inside convert_kv(): key="length", val="2", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Looping inside convert_dict(): key="code", val="0x2A", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Inside convert_kv(): key="code", val="0x2A", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Looping inside convert_dict(): key="value", val="6", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Inside convert_kv(): key="value", val="6", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Looping inside convert_dict(): key="Base MAC Address", val="{u'index': 47, u'length': 6, u'code': u'0x24', u'value': u'00:0C:29:CD:8E:29'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Base MAC Address" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Base MAC Address"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Base_MAC_Address"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'index': 47, u'length': 6, u'code': u'0x24', u'value': u'00:0C:29:CD:8E:29'}"
INFO:dicttoxml:Looping inside convert_dict(): key="index", val="47", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Inside convert_kv(): key="index", val="47", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Looping inside convert_dict(): key="length", val="6", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Inside convert_kv(): key="length", val="6", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Looping inside convert_dict(): key="code", val="0x24", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Inside convert_kv(): key="code", val="0x24", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Looping inside convert_dict(): key="value", val="00:0C:29:CD:8E:29", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Inside convert_kv(): key="value", val="00:0C:29:CD:8E:29", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Looping inside convert_dict(): key="Vendor Name", val="{u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Vendor Name" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Vendor Name"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Vendor_Name"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}"
INFO:dicttoxml:Looping inside convert_dict(): key="index", val="11", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Inside convert_kv(): key="index", val="11", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Looping inside convert_dict(): key="length", val="16", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Inside convert_kv(): key="length", val="16", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Looping inside convert_dict(): key="code", val="0x2D", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Inside convert_kv(): key="code", val="0x2D", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Looping inside convert_dict(): key="value", val="Cumulus Networks", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Inside convert_kv(): key="value", val="Cumulus Networks", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Looping inside convert_dict(): key="validTlvInfoHeader", val="True", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "validTlvInfoHeader" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "validTlvInfoHeader"
INFO:dicttoxml:Inside convert_kv(): key="validTlvInfoHeader", val="True", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "validTlvInfoHeader" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "validTlvInfoHeader"
INFO:dicttoxml:Inside dicttoxml(): type(obj) is: "dict", obj="{u'eth0': {u'iface_obj': {u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'00:50:56:c0:00:08', u'adj_mac': u'00:50:56:c0:00:08', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'192.168.50.134/24']}, u'vlan': None, u'asic': None, u'dhcp_enabled': True, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:29', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': {u'ipv4': [u'00:50:56:c0:00:08', u'00:50:56:fe:0f:04'], u'ipv6': []}, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 17834, u'MTU': 1500, u'Met': 0, u'RX_OK': 20530, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'IP: 192.168.50.134/24(DHCP)', u'connector_type': u'Unknown', u'mode': u'Mgmt', u'speed': u'1G'}, u'bridge': {u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 9, u'MTU': 1500, u'Met': 0, u'RX_OK': 2164, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'', u'connector_type': u'Unknown', u'mode': u'Bridge/L2', u'speed': u'N/A'}, u'swp1': {u'iface_obj': {u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'02:00:4c:4f:4f:50', u'adj_mac': u'02:00:4c:4f:4f:50', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': 102, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': [{u'vlan': 102, u'flags': [u'PVID', u'Egress Untagged']}], u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': True, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': u'102', u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 12854, u'MTU': 1500, u'Met': 0, u'RX_OK': 2193, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'Master: bridge(UP)', u'connector_type': u'Unknown', u'mode': u'Access/L2', u'speed': u'1G'}, u'pimreg': {u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1472, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 1472, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'ORU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'', u'connector_type': u'Unknown', u'mode': u'Default', u'speed': u'N/A'}, u'lo': {u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'127.0.0.1/8', u'::1/128']}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:00:00:00:00:00', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 65536, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 65536, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'LRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'IP: 127.0.0.1/8, ::1/128', u'connector_type': u'Unknown', u'mode': u'Loopback', u'speed': u'N/A'}}"
INFO:dicttoxml:Inside convert(). obj type is: "dict", obj="{u'eth0': {u'iface_obj': {u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'00:50:56:c0:00:08', u'adj_mac': u'00:50:56:c0:00:08', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'192.168.50.134/24']}, u'vlan': None, u'asic': None, u'dhcp_enabled': True, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:29', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': {u'ipv4': [u'00:50:56:c0:00:08', u'00:50:56:fe:0f:04'], u'ipv6': []}, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 17834, u'MTU': 1500, u'Met': 0, u'RX_OK': 20530, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'IP: 192.168.50.134/24(DHCP)', u'connector_type': u'Unknown', u'mode': u'Mgmt', u'speed': u'1G'}, u'bridge': {u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 9, u'MTU': 1500, u'Met': 0, u'RX_OK': 2164, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'', u'connector_type': u'Unknown', u'mode': u'Bridge/L2', u'speed': u'N/A'}, u'swp1': {u'iface_obj': {u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'02:00:4c:4f:4f:50', u'adj_mac': u'02:00:4c:4f:4f:50', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': 102, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': [{u'vlan': 102, u'flags': [u'PVID', u'Egress Untagged']}], u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': True, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': u'102', u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 12854, u'MTU': 1500, u'Met': 0, u'RX_OK': 2193, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'Master: bridge(UP)', u'connector_type': u'Unknown', u'mode': u'Access/L2', u'speed': u'1G'}, u'pimreg': {u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1472, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 1472, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'ORU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'', u'connector_type': u'Unknown', u'mode': u'Default', u'speed': u'N/A'}, u'lo': {u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'127.0.0.1/8', u'::1/128']}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:00:00:00:00:00', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 65536, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 65536, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'LRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'IP: 127.0.0.1/8, ::1/128', u'connector_type': u'Unknown', u'mode': u'Loopback', u'speed': u'N/A'}}"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'eth0': {u'iface_obj': {u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'00:50:56:c0:00:08', u'adj_mac': u'00:50:56:c0:00:08', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'192.168.50.134/24']}, u'vlan': None, u'asic': None, u'dhcp_enabled': True, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:29', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': {u'ipv4': [u'00:50:56:c0:00:08', u'00:50:56:fe:0f:04'], u'ipv6': []}, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 17834, u'MTU': 1500, u'Met': 0, u'RX_OK': 20530, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'IP: 192.168.50.134/24(DHCP)', u'connector_type': u'Unknown', u'mode': u'Mgmt', u'speed': u'1G'}, u'bridge': {u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 9, u'MTU': 1500, u'Met': 0, u'RX_OK': 2164, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'', u'connector_type': u'Unknown', u'mode': u'Bridge/L2', u'speed': u'N/A'}, u'swp1': {u'iface_obj': {u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'02:00:4c:4f:4f:50', u'adj_mac': u'02:00:4c:4f:4f:50', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': 102, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': [{u'vlan': 102, u'flags': [u'PVID', u'Egress Untagged']}], u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': True, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': u'102', u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 12854, u'MTU': 1500, u'Met': 0, u'RX_OK': 2193, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'Master: bridge(UP)', u'connector_type': u'Unknown', u'mode': u'Access/L2', u'speed': u'1G'}, u'pimreg': {u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1472, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 1472, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'ORU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'', u'connector_type': u'Unknown', u'mode': u'Default', u'speed': u'N/A'}, u'lo': {u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'127.0.0.1/8', u'::1/128']}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:00:00:00:00:00', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 65536, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 65536, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'LRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'IP: 127.0.0.1/8, ::1/128', u'connector_type': u'Unknown', u'mode': u'Loopback', u'speed': u'N/A'}}"
INFO:dicttoxml:Looping inside convert_dict(): key="eth0", val="{u'iface_obj': {u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'00:50:56:c0:00:08', u'adj_mac': u'00:50:56:c0:00:08', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'192.168.50.134/24']}, u'vlan': None, u'asic': None, u'dhcp_enabled': True, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:29', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': {u'ipv4': [u'00:50:56:c0:00:08', u'00:50:56:fe:0f:04'], u'ipv6': []}, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 17834, u'MTU': 1500, u'Met': 0, u'RX_OK': 20530, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'IP: 192.168.50.134/24(DHCP)', u'connector_type': u'Unknown', u'mode': u'Mgmt', u'speed': u'1G'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "eth0" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "eth0"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'iface_obj': {u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'00:50:56:c0:00:08', u'adj_mac': u'00:50:56:c0:00:08', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'192.168.50.134/24']}, u'vlan': None, u'asic': None, u'dhcp_enabled': True, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:29', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': {u'ipv4': [u'00:50:56:c0:00:08', u'00:50:56:fe:0f:04'], u'ipv6': []}, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 17834, u'MTU': 1500, u'Met': 0, u'RX_OK': 20530, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'IP: 192.168.50.134/24(DHCP)', u'connector_type': u'Unknown', u'mode': u'Mgmt', u'speed': u'1G'}"
INFO:dicttoxml:Looping inside convert_dict(): key="iface_obj", val="{u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'00:50:56:c0:00:08', u'adj_mac': u'00:50:56:c0:00:08', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'192.168.50.134/24']}, u'vlan': None, u'asic': None, u'dhcp_enabled': True, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:29', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': {u'ipv4': [u'00:50:56:c0:00:08', u'00:50:56:fe:0f:04'], u'ipv6': []}, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 17834, u'MTU': 1500, u'Met': 0, u'RX_OK': 20530, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "iface_obj" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "iface_obj"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'00:50:56:c0:00:08', u'adj_mac': u'00:50:56:c0:00:08', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'192.168.50.134/24']}, u'vlan': None, u'asic': None, u'dhcp_enabled': True, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:29', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': {u'ipv4': [u'00:50:56:c0:00:08', u'00:50:56:fe:0f:04'], u'ipv6': []}, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 17834, u'MTU': 1500, u'Met': 0, u'RX_OK': 20530, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}"
INFO:dicttoxml:Looping inside convert_dict(): key="lldp", val="[{u'adj_ttl': u'3601', u'adj_port': u'00:50:56:c0:00:08', u'adj_mac': u'00:50:56:c0:00:08', u'adj_hostname': None, u'system_descr': None}]", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lldp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lldp"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_list(): item="{u'adj_ttl': u'3601', u'adj_port': u'00:50:56:c0:00:08', u'adj_mac': u'00:50:56:c0:00:08', u'adj_hostname': None, u'system_descr': None}", item_name="item", type="dict"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'adj_ttl': u'3601', u'adj_port': u'00:50:56:c0:00:08', u'adj_mac': u'00:50:56:c0:00:08', u'adj_hostname': None, u'system_descr': None}"
INFO:dicttoxml:Looping inside convert_dict(): key="adj_ttl", val="3601", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_ttl" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_ttl"
INFO:dicttoxml:Inside convert_kv(): key="adj_ttl", val="3601", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_ttl" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_ttl"
INFO:dicttoxml:Looping inside convert_dict(): key="adj_port", val="00:50:56:c0:00:08", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_port" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_port"
INFO:dicttoxml:Inside convert_kv(): key="adj_port", val="00:50:56:c0:00:08", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_port" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_port"
INFO:dicttoxml:Looping inside convert_dict(): key="adj_mac", val="00:50:56:c0:00:08", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_mac"
INFO:dicttoxml:Inside convert_kv(): key="adj_mac", val="00:50:56:c0:00:08", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_mac"
INFO:dicttoxml:Looping inside convert_dict(): key="adj_hostname", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_hostname" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_hostname"
INFO:dicttoxml:Inside convert_none(): key="adj_hostname"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_hostname" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_hostname"
INFO:dicttoxml:Looping inside convert_dict(): key="system_descr", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "system_descr" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "system_descr"
INFO:dicttoxml:Inside convert_none(): key="system_descr"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "system_descr" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "system_descr"
INFO:dicttoxml:Looping inside convert_dict(): key="native_vlan", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "native_vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "native_vlan"
INFO:dicttoxml:Inside convert_none(): key="native_vlan"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "native_vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "native_vlan"
INFO:dicttoxml:Looping inside convert_dict(): key="description", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "description"
INFO:dicttoxml:Inside convert_kv(): key="description", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "description"
INFO:dicttoxml:Looping inside convert_dict(): key="ip_address", val="{u'allentries': [u'192.168.50.134/24']}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_address" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_address"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'allentries': [u'192.168.50.134/24']}"
INFO:dicttoxml:Looping inside convert_dict(): key="allentries", val="[u'192.168.50.134/24']", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "allentries" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "allentries"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_list(): item="192.168.50.134/24", item_name="item", type="unicode"
INFO:dicttoxml:Inside convert_kv(): key="item", val="192.168.50.134/24", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "item" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "item"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan"
INFO:dicttoxml:Inside convert_none(): key="vlan"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan"
INFO:dicttoxml:Looping inside convert_dict(): key="asic", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "asic" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "asic"
INFO:dicttoxml:Inside convert_none(): key="asic"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "asic" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "asic"
INFO:dicttoxml:Looping inside convert_dict(): key="dhcp_enabled", val="True", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "dhcp_enabled" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "dhcp_enabled"
INFO:dicttoxml:Inside convert_kv(): key="dhcp_enabled", val="True", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "dhcp_enabled" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "dhcp_enabled"
INFO:dicttoxml:Looping inside convert_dict(): key="lacp", val="{u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lacp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lacp"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}"
INFO:dicttoxml:Looping inside convert_dict(): key="rate", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "rate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "rate"
INFO:dicttoxml:Inside convert_kv(): key="rate", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "rate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "rate"
INFO:dicttoxml:Looping inside convert_dict(): key="bypass", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "bypass" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "bypass"
INFO:dicttoxml:Inside convert_kv(): key="bypass", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "bypass" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "bypass"
INFO:dicttoxml:Looping inside convert_dict(): key="partner_mac", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "partner_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "partner_mac"
INFO:dicttoxml:Inside convert_kv(): key="partner_mac", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "partner_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "partner_mac"
INFO:dicttoxml:Looping inside convert_dict(): key="sys_priority", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "sys_priority" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "sys_priority"
INFO:dicttoxml:Inside convert_kv(): key="sys_priority", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "sys_priority" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "sys_priority"
INFO:dicttoxml:Looping inside convert_dict(): key="mac", val="00:0c:29:cd:8e:29", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mac"
INFO:dicttoxml:Inside convert_kv(): key="mac", val="00:0c:29:cd:8e:29", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mac"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan_filtering", val="False", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_filtering" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_filtering"
INFO:dicttoxml:Inside convert_kv(): key="vlan_filtering", val="False", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_filtering" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_filtering"
INFO:dicttoxml:Looping inside convert_dict(): key="min_links", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "min_links" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "min_links"
INFO:dicttoxml:Inside convert_kv(): key="min_links", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "min_links" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "min_links"
INFO:dicttoxml:Looping inside convert_dict(): key="ip_neighbors", val="{u'ipv4': [u'00:50:56:c0:00:08', u'00:50:56:fe:0f:04'], u'ipv6': []}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_neighbors" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_neighbors"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'ipv4': [u'00:50:56:c0:00:08', u'00:50:56:fe:0f:04'], u'ipv6': []}"
INFO:dicttoxml:Looping inside convert_dict(): key="ipv4", val="[u'00:50:56:c0:00:08', u'00:50:56:fe:0f:04']", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ipv4" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ipv4"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_list(): item="00:50:56:c0:00:08", item_name="item", type="unicode"
INFO:dicttoxml:Inside convert_kv(): key="item", val="00:50:56:c0:00:08", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "item" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "item"
INFO:dicttoxml:Looping inside convert_list(): item="00:50:56:fe:0f:04", item_name="item", type="unicode"
INFO:dicttoxml:Inside convert_kv(): key="item", val="00:50:56:fe:0f:04", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "item" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "item"
INFO:dicttoxml:Looping inside convert_dict(): key="ipv6", val="[]", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ipv6" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ipv6"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_dict(): key="mtu", val="1500", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mtu" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mtu"
INFO:dicttoxml:Inside convert_kv(): key="mtu", val="1500", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mtu" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mtu"
INFO:dicttoxml:Looping inside convert_dict(): key="members", val="{}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "members" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "members"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{}"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan_list", val="[]", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_list" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_list"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_dict(): key="counters", val="{u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 17834, u'MTU': 1500, u'Met': 0, u'RX_OK': 20530, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "counters" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "counters"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 17834, u'MTU': 1500, u'Met': 0, u'RX_OK': 20530, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_ERR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_ERR"
INFO:dicttoxml:Inside convert_kv(): key="RX_ERR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_ERR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_ERR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_ERR"
INFO:dicttoxml:Inside convert_kv(): key="TX_ERR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_ERR"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_OVR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OVR"
INFO:dicttoxml:Inside convert_kv(): key="RX_OVR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OVR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_OVR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OVR"
INFO:dicttoxml:Inside convert_kv(): key="TX_OVR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OVR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_OK", val="17834", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OK"
INFO:dicttoxml:Inside convert_kv(): key="TX_OK", val="17834", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OK"
INFO:dicttoxml:Looping inside convert_dict(): key="MTU", val="1500", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "MTU" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MTU"
INFO:dicttoxml:Inside convert_kv(): key="MTU", val="1500", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "MTU" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MTU"
INFO:dicttoxml:Looping inside convert_dict(): key="Met", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Met" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Met"
INFO:dicttoxml:Inside convert_kv(): key="Met", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Met" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Met"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_OK", val="20530", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OK"
INFO:dicttoxml:Inside convert_kv(): key="RX_OK", val="20530", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OK"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_DRP", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_DRP"
INFO:dicttoxml:Inside convert_kv(): key="TX_DRP", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_DRP"
INFO:dicttoxml:Looping inside convert_dict(): key="Flg", val="BMRU", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Flg" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Flg"
INFO:dicttoxml:Inside convert_kv(): key="Flg", val="BMRU", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Flg" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Flg"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_DRP", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_DRP"
INFO:dicttoxml:Inside convert_kv(): key="RX_DRP", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_DRP"
INFO:dicttoxml:Looping inside convert_dict(): key="linkstate", val="UP", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "linkstate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "linkstate"
INFO:dicttoxml:Inside convert_kv(): key="linkstate", val="UP", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "linkstate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "linkstate"
INFO:dicttoxml:Looping inside convert_dict(): key="summary", val="IP: 192.168.50.134/24(DHCP)", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "summary" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "summary"
INFO:dicttoxml:Inside convert_kv(): key="summary", val="IP: 192.168.50.134/24(DHCP)", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "summary" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "summary"
INFO:dicttoxml:Looping inside convert_dict(): key="connector_type", val="Unknown", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "connector_type" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "connector_type"
INFO:dicttoxml:Inside convert_kv(): key="connector_type", val="Unknown", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "connector_type" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "connector_type"
INFO:dicttoxml:Looping inside convert_dict(): key="mode", val="Mgmt", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mode" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mode"
INFO:dicttoxml:Inside convert_kv(): key="mode", val="Mgmt", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mode" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mode"
INFO:dicttoxml:Looping inside convert_dict(): key="speed", val="1G", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "speed" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "speed"
INFO:dicttoxml:Inside convert_kv(): key="speed", val="1G", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "speed" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "speed"
INFO:dicttoxml:Looping inside convert_dict(): key="bridge", val="{u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 9, u'MTU': 1500, u'Met': 0, u'RX_OK': 2164, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'', u'connector_type': u'Unknown', u'mode': u'Bridge/L2', u'speed': u'N/A'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "bridge" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "bridge"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 9, u'MTU': 1500, u'Met': 0, u'RX_OK': 2164, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'', u'connector_type': u'Unknown', u'mode': u'Bridge/L2', u'speed': u'N/A'}"
INFO:dicttoxml:Looping inside convert_dict(): key="iface_obj", val="{u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 9, u'MTU': 1500, u'Met': 0, u'RX_OK': 2164, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "iface_obj" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "iface_obj"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 9, u'MTU': 1500, u'Met': 0, u'RX_OK': 2164, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}"
INFO:dicttoxml:Looping inside convert_dict(): key="lldp", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lldp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lldp"
INFO:dicttoxml:Inside convert_none(): key="lldp"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lldp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lldp"
INFO:dicttoxml:Looping inside convert_dict(): key="native_vlan", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "native_vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "native_vlan"
INFO:dicttoxml:Inside convert_none(): key="native_vlan"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "native_vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "native_vlan"
INFO:dicttoxml:Looping inside convert_dict(): key="description", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "description"
INFO:dicttoxml:Inside convert_kv(): key="description", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "description"
INFO:dicttoxml:Looping inside convert_dict(): key="ip_address", val="{u'allentries': []}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_address" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_address"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'allentries': []}"
INFO:dicttoxml:Looping inside convert_dict(): key="allentries", val="[]", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "allentries" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "allentries"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_dict(): key="vlan", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan"
INFO:dicttoxml:Inside convert_none(): key="vlan"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan"
INFO:dicttoxml:Looping inside convert_dict(): key="asic", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "asic" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "asic"
INFO:dicttoxml:Inside convert_none(): key="asic"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "asic" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "asic"
INFO:dicttoxml:Looping inside convert_dict(): key="dhcp_enabled", val="False", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "dhcp_enabled" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "dhcp_enabled"
INFO:dicttoxml:Inside convert_kv(): key="dhcp_enabled", val="False", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "dhcp_enabled" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "dhcp_enabled"
INFO:dicttoxml:Looping inside convert_dict(): key="lacp", val="{u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lacp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lacp"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}"
INFO:dicttoxml:Looping inside convert_dict(): key="rate", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "rate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "rate"
INFO:dicttoxml:Inside convert_kv(): key="rate", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "rate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "rate"
INFO:dicttoxml:Looping inside convert_dict(): key="bypass", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "bypass" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "bypass"
INFO:dicttoxml:Inside convert_kv(): key="bypass", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "bypass" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "bypass"
INFO:dicttoxml:Looping inside convert_dict(): key="partner_mac", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "partner_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "partner_mac"
INFO:dicttoxml:Inside convert_kv(): key="partner_mac", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "partner_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "partner_mac"
INFO:dicttoxml:Looping inside convert_dict(): key="sys_priority", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "sys_priority" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "sys_priority"
INFO:dicttoxml:Inside convert_kv(): key="sys_priority", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "sys_priority" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "sys_priority"
INFO:dicttoxml:Looping inside convert_dict(): key="mac", val="00:0c:29:cd:8e:33", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mac"
INFO:dicttoxml:Inside convert_kv(): key="mac", val="00:0c:29:cd:8e:33", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mac"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan_filtering", val="False", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_filtering" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_filtering"
INFO:dicttoxml:Inside convert_kv(): key="vlan_filtering", val="False", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_filtering" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_filtering"
INFO:dicttoxml:Looping inside convert_dict(): key="min_links", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "min_links" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "min_links"
INFO:dicttoxml:Inside convert_kv(): key="min_links", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "min_links" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "min_links"
INFO:dicttoxml:Looping inside convert_dict(): key="ip_neighbors", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_neighbors" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_neighbors"
INFO:dicttoxml:Inside convert_none(): key="ip_neighbors"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_neighbors" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_neighbors"
INFO:dicttoxml:Looping inside convert_dict(): key="mtu", val="1500", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mtu" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mtu"
INFO:dicttoxml:Inside convert_kv(): key="mtu", val="1500", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mtu" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mtu"
INFO:dicttoxml:Looping inside convert_dict(): key="members", val="{}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "members" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "members"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{}"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan_list", val="[]", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_list" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_list"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_dict(): key="counters", val="{u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 9, u'MTU': 1500, u'Met': 0, u'RX_OK': 2164, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "counters" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "counters"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 9, u'MTU': 1500, u'Met': 0, u'RX_OK': 2164, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_ERR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_ERR"
INFO:dicttoxml:Inside convert_kv(): key="RX_ERR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_ERR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_ERR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_ERR"
INFO:dicttoxml:Inside convert_kv(): key="TX_ERR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_ERR"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_OVR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OVR"
INFO:dicttoxml:Inside convert_kv(): key="RX_OVR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OVR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_OVR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OVR"
INFO:dicttoxml:Inside convert_kv(): key="TX_OVR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OVR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_OK", val="9", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OK"
INFO:dicttoxml:Inside convert_kv(): key="TX_OK", val="9", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OK"
INFO:dicttoxml:Looping inside convert_dict(): key="MTU", val="1500", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "MTU" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MTU"
INFO:dicttoxml:Inside convert_kv(): key="MTU", val="1500", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "MTU" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MTU"
INFO:dicttoxml:Looping inside convert_dict(): key="Met", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Met" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Met"
INFO:dicttoxml:Inside convert_kv(): key="Met", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Met" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Met"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_OK", val="2164", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OK"
INFO:dicttoxml:Inside convert_kv(): key="RX_OK", val="2164", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OK"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_DRP", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_DRP"
INFO:dicttoxml:Inside convert_kv(): key="TX_DRP", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_DRP"
INFO:dicttoxml:Looping inside convert_dict(): key="Flg", val="BMRU", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Flg" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Flg"
INFO:dicttoxml:Inside convert_kv(): key="Flg", val="BMRU", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Flg" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Flg"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_DRP", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_DRP"
INFO:dicttoxml:Inside convert_kv(): key="RX_DRP", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_DRP"
INFO:dicttoxml:Looping inside convert_dict(): key="linkstate", val="UP", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "linkstate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "linkstate"
INFO:dicttoxml:Inside convert_kv(): key="linkstate", val="UP", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "linkstate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "linkstate"
INFO:dicttoxml:Looping inside convert_dict(): key="summary", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "summary" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "summary"
INFO:dicttoxml:Inside convert_kv(): key="summary", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "summary" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "summary"
INFO:dicttoxml:Looping inside convert_dict(): key="connector_type", val="Unknown", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "connector_type" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "connector_type"
INFO:dicttoxml:Inside convert_kv(): key="connector_type", val="Unknown", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "connector_type" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "connector_type"
INFO:dicttoxml:Looping inside convert_dict(): key="mode", val="Bridge/L2", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mode" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mode"
INFO:dicttoxml:Inside convert_kv(): key="mode", val="Bridge/L2", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mode" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mode"
INFO:dicttoxml:Looping inside convert_dict(): key="speed", val="N/A", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "speed" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "speed"
INFO:dicttoxml:Inside convert_kv(): key="speed", val="N/A", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "speed" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "speed"
INFO:dicttoxml:Looping inside convert_dict(): key="swp1", val="{u'iface_obj': {u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'02:00:4c:4f:4f:50', u'adj_mac': u'02:00:4c:4f:4f:50', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': 102, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': [{u'vlan': 102, u'flags': [u'PVID', u'Egress Untagged']}], u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': True, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': u'102', u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 12854, u'MTU': 1500, u'Met': 0, u'RX_OK': 2193, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'Master: bridge(UP)', u'connector_type': u'Unknown', u'mode': u'Access/L2', u'speed': u'1G'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "swp1" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "swp1"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'iface_obj': {u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'02:00:4c:4f:4f:50', u'adj_mac': u'02:00:4c:4f:4f:50', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': 102, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': [{u'vlan': 102, u'flags': [u'PVID', u'Egress Untagged']}], u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': True, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': u'102', u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 12854, u'MTU': 1500, u'Met': 0, u'RX_OK': 2193, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'Master: bridge(UP)', u'connector_type': u'Unknown', u'mode': u'Access/L2', u'speed': u'1G'}"
INFO:dicttoxml:Looping inside convert_dict(): key="iface_obj", val="{u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'02:00:4c:4f:4f:50', u'adj_mac': u'02:00:4c:4f:4f:50', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': 102, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': [{u'vlan': 102, u'flags': [u'PVID', u'Egress Untagged']}], u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': True, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': u'102', u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 12854, u'MTU': 1500, u'Met': 0, u'RX_OK': 2193, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "iface_obj" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "iface_obj"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'02:00:4c:4f:4f:50', u'adj_mac': u'02:00:4c:4f:4f:50', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': 102, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': [{u'vlan': 102, u'flags': [u'PVID', u'Egress Untagged']}], u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': True, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': u'102', u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 12854, u'MTU': 1500, u'Met': 0, u'RX_OK': 2193, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}"
INFO:dicttoxml:Looping inside convert_dict(): key="lldp", val="[{u'adj_ttl': u'3601', u'adj_port': u'02:00:4c:4f:4f:50', u'adj_mac': u'02:00:4c:4f:4f:50', u'adj_hostname': None, u'system_descr': None}]", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lldp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lldp"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_list(): item="{u'adj_ttl': u'3601', u'adj_port': u'02:00:4c:4f:4f:50', u'adj_mac': u'02:00:4c:4f:4f:50', u'adj_hostname': None, u'system_descr': None}", item_name="item", type="dict"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'adj_ttl': u'3601', u'adj_port': u'02:00:4c:4f:4f:50', u'adj_mac': u'02:00:4c:4f:4f:50', u'adj_hostname': None, u'system_descr': None}"
INFO:dicttoxml:Looping inside convert_dict(): key="adj_ttl", val="3601", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_ttl" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_ttl"
INFO:dicttoxml:Inside convert_kv(): key="adj_ttl", val="3601", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_ttl" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_ttl"
INFO:dicttoxml:Looping inside convert_dict(): key="adj_port", val="02:00:4c:4f:4f:50", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_port" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_port"
INFO:dicttoxml:Inside convert_kv(): key="adj_port", val="02:00:4c:4f:4f:50", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_port" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_port"
INFO:dicttoxml:Looping inside convert_dict(): key="adj_mac", val="02:00:4c:4f:4f:50", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_mac"
INFO:dicttoxml:Inside convert_kv(): key="adj_mac", val="02:00:4c:4f:4f:50", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_mac"
INFO:dicttoxml:Looping inside convert_dict(): key="adj_hostname", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_hostname" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_hostname"
INFO:dicttoxml:Inside convert_none(): key="adj_hostname"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_hostname" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_hostname"
INFO:dicttoxml:Looping inside convert_dict(): key="system_descr", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "system_descr" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "system_descr"
INFO:dicttoxml:Inside convert_none(): key="system_descr"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "system_descr" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "system_descr"
INFO:dicttoxml:Looping inside convert_dict(): key="native_vlan", val="102", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "native_vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "native_vlan"
INFO:dicttoxml:Inside convert_kv(): key="native_vlan", val="102", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "native_vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "native_vlan"
INFO:dicttoxml:Looping inside convert_dict(): key="description", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "description"
INFO:dicttoxml:Inside convert_kv(): key="description", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "description"
INFO:dicttoxml:Looping inside convert_dict(): key="ip_address", val="{u'allentries': []}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_address" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_address"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'allentries': []}"
INFO:dicttoxml:Looping inside convert_dict(): key="allentries", val="[]", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "allentries" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "allentries"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_dict(): key="vlan", val="[{u'vlan': 102, u'flags': [u'PVID', u'Egress Untagged']}]", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_list(): item="{u'vlan': 102, u'flags': [u'PVID', u'Egress Untagged']}", item_name="item", type="dict"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'vlan': 102, u'flags': [u'PVID', u'Egress Untagged']}"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan", val="102", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan"
INFO:dicttoxml:Inside convert_kv(): key="vlan", val="102", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan"
INFO:dicttoxml:Looping inside convert_dict(): key="flags", val="[u'PVID', u'Egress Untagged']", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "flags" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "flags"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_list(): item="PVID", item_name="item", type="unicode"
INFO:dicttoxml:Inside convert_kv(): key="item", val="PVID", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "item" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "item"
INFO:dicttoxml:Looping inside convert_list(): item="Egress Untagged", item_name="item", type="unicode"
INFO:dicttoxml:Inside convert_kv(): key="item", val="Egress Untagged", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "item" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "item"
INFO:dicttoxml:Looping inside convert_dict(): key="asic", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "asic" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "asic"
INFO:dicttoxml:Inside convert_none(): key="asic"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "asic" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "asic"
INFO:dicttoxml:Looping inside convert_dict(): key="dhcp_enabled", val="False", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "dhcp_enabled" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "dhcp_enabled"
INFO:dicttoxml:Inside convert_kv(): key="dhcp_enabled", val="False", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "dhcp_enabled" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "dhcp_enabled"
INFO:dicttoxml:Looping inside convert_dict(): key="lacp", val="{u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lacp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lacp"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}"
INFO:dicttoxml:Looping inside convert_dict(): key="rate", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "rate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "rate"
INFO:dicttoxml:Inside convert_kv(): key="rate", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "rate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "rate"
INFO:dicttoxml:Looping inside convert_dict(): key="bypass", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "bypass" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "bypass"
INFO:dicttoxml:Inside convert_kv(): key="bypass", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "bypass" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "bypass"
INFO:dicttoxml:Looping inside convert_dict(): key="partner_mac", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "partner_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "partner_mac"
INFO:dicttoxml:Inside convert_kv(): key="partner_mac", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "partner_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "partner_mac"
INFO:dicttoxml:Looping inside convert_dict(): key="sys_priority", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "sys_priority" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "sys_priority"
INFO:dicttoxml:Inside convert_kv(): key="sys_priority", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "sys_priority" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "sys_priority"
INFO:dicttoxml:Looping inside convert_dict(): key="mac", val="00:0c:29:cd:8e:33", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mac"
INFO:dicttoxml:Inside convert_kv(): key="mac", val="00:0c:29:cd:8e:33", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mac"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan_filtering", val="True", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_filtering" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_filtering"
INFO:dicttoxml:Inside convert_kv(): key="vlan_filtering", val="True", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_filtering" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_filtering"
INFO:dicttoxml:Looping inside convert_dict(): key="min_links", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "min_links" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "min_links"
INFO:dicttoxml:Inside convert_kv(): key="min_links", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "min_links" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "min_links"
INFO:dicttoxml:Looping inside convert_dict(): key="ip_neighbors", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_neighbors" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_neighbors"
INFO:dicttoxml:Inside convert_none(): key="ip_neighbors"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_neighbors" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_neighbors"
INFO:dicttoxml:Looping inside convert_dict(): key="mtu", val="1500", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mtu" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mtu"
INFO:dicttoxml:Inside convert_kv(): key="mtu", val="1500", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mtu" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mtu"
INFO:dicttoxml:Looping inside convert_dict(): key="members", val="{}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "members" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "members"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{}"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan_list", val="102", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_list" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_list"
INFO:dicttoxml:Inside convert_kv(): key="vlan_list", val="102", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_list" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_list"
INFO:dicttoxml:Looping inside convert_dict(): key="counters", val="{u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 12854, u'MTU': 1500, u'Met': 0, u'RX_OK': 2193, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "counters" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "counters"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 12854, u'MTU': 1500, u'Met': 0, u'RX_OK': 2193, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_ERR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_ERR"
INFO:dicttoxml:Inside convert_kv(): key="RX_ERR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_ERR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_ERR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_ERR"
INFO:dicttoxml:Inside convert_kv(): key="TX_ERR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_ERR"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_OVR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OVR"
INFO:dicttoxml:Inside convert_kv(): key="RX_OVR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OVR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_OVR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OVR"
INFO:dicttoxml:Inside convert_kv(): key="TX_OVR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OVR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_OK", val="12854", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OK"
INFO:dicttoxml:Inside convert_kv(): key="TX_OK", val="12854", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OK"
INFO:dicttoxml:Looping inside convert_dict(): key="MTU", val="1500", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "MTU" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MTU"
INFO:dicttoxml:Inside convert_kv(): key="MTU", val="1500", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "MTU" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MTU"
INFO:dicttoxml:Looping inside convert_dict(): key="Met", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Met" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Met"
INFO:dicttoxml:Inside convert_kv(): key="Met", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Met" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Met"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_OK", val="2193", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OK"
INFO:dicttoxml:Inside convert_kv(): key="RX_OK", val="2193", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OK"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_DRP", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_DRP"
INFO:dicttoxml:Inside convert_kv(): key="TX_DRP", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_DRP"
INFO:dicttoxml:Looping inside convert_dict(): key="Flg", val="BMRU", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Flg" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Flg"
INFO:dicttoxml:Inside convert_kv(): key="Flg", val="BMRU", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Flg" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Flg"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_DRP", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_DRP"
INFO:dicttoxml:Inside convert_kv(): key="RX_DRP", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_DRP"
INFO:dicttoxml:Looping inside convert_dict(): key="linkstate", val="UP", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "linkstate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "linkstate"
INFO:dicttoxml:Inside convert_kv(): key="linkstate", val="UP", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "linkstate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "linkstate"
INFO:dicttoxml:Looping inside convert_dict(): key="summary", val="Master: bridge(UP)", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "summary" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "summary"
INFO:dicttoxml:Inside convert_kv(): key="summary", val="Master: bridge(UP)", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "summary" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "summary"
INFO:dicttoxml:Looping inside convert_dict(): key="connector_type", val="Unknown", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "connector_type" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "connector_type"
INFO:dicttoxml:Inside convert_kv(): key="connector_type", val="Unknown", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "connector_type" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "connector_type"
INFO:dicttoxml:Looping inside convert_dict(): key="mode", val="Access/L2", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mode" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mode"
INFO:dicttoxml:Inside convert_kv(): key="mode", val="Access/L2", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mode" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mode"
INFO:dicttoxml:Looping inside convert_dict(): key="speed", val="1G", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "speed" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "speed"
INFO:dicttoxml:Inside convert_kv(): key="speed", val="1G", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "speed" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "speed"
INFO:dicttoxml:Looping inside convert_dict(): key="pimreg", val="{u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1472, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 1472, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'ORU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'', u'connector_type': u'Unknown', u'mode': u'Default', u'speed': u'N/A'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "pimreg" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "pimreg"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1472, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 1472, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'ORU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'', u'connector_type': u'Unknown', u'mode': u'Default', u'speed': u'N/A'}"
INFO:dicttoxml:Looping inside convert_dict(): key="iface_obj", val="{u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1472, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 1472, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'ORU', u'RX_DRP': 0}}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "iface_obj" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "iface_obj"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1472, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 1472, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'ORU', u'RX_DRP': 0}}"
INFO:dicttoxml:Looping inside convert_dict(): key="lldp", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lldp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lldp"
INFO:dicttoxml:Inside convert_none(): key="lldp"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lldp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lldp"
INFO:dicttoxml:Looping inside convert_dict(): key="native_vlan", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "native_vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "native_vlan"
INFO:dicttoxml:Inside convert_none(): key="native_vlan"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "native_vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "native_vlan"
INFO:dicttoxml:Looping inside convert_dict(): key="description", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "description"
INFO:dicttoxml:Inside convert_kv(): key="description", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "description"
INFO:dicttoxml:Looping inside convert_dict(): key="ip_address", val="{u'allentries': []}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_address" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_address"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'allentries': []}"
INFO:dicttoxml:Looping inside convert_dict(): key="allentries", val="[]", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "allentries" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "allentries"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_dict(): key="vlan", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan"
INFO:dicttoxml:Inside convert_none(): key="vlan"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan"
INFO:dicttoxml:Looping inside convert_dict(): key="asic", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "asic" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "asic"
INFO:dicttoxml:Inside convert_none(): key="asic"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "asic" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "asic"
INFO:dicttoxml:Looping inside convert_dict(): key="dhcp_enabled", val="False", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "dhcp_enabled" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "dhcp_enabled"
INFO:dicttoxml:Inside convert_kv(): key="dhcp_enabled", val="False", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "dhcp_enabled" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "dhcp_enabled"
INFO:dicttoxml:Looping inside convert_dict(): key="lacp", val="{u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lacp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lacp"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}"
INFO:dicttoxml:Looping inside convert_dict(): key="rate", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "rate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "rate"
INFO:dicttoxml:Inside convert_kv(): key="rate", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "rate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "rate"
INFO:dicttoxml:Looping inside convert_dict(): key="bypass", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "bypass" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "bypass"
INFO:dicttoxml:Inside convert_kv(): key="bypass", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "bypass" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "bypass"
INFO:dicttoxml:Looping inside convert_dict(): key="partner_mac", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "partner_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "partner_mac"
INFO:dicttoxml:Inside convert_kv(): key="partner_mac", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "partner_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "partner_mac"
INFO:dicttoxml:Looping inside convert_dict(): key="sys_priority", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "sys_priority" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "sys_priority"
INFO:dicttoxml:Inside convert_kv(): key="sys_priority", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "sys_priority" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "sys_priority"
INFO:dicttoxml:Looping inside convert_dict(): key="mac", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mac"
INFO:dicttoxml:Inside convert_kv(): key="mac", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mac"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan_filtering", val="False", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_filtering" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_filtering"
INFO:dicttoxml:Inside convert_kv(): key="vlan_filtering", val="False", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_filtering" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_filtering"
INFO:dicttoxml:Looping inside convert_dict(): key="min_links", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "min_links" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "min_links"
INFO:dicttoxml:Inside convert_kv(): key="min_links", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "min_links" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "min_links"
INFO:dicttoxml:Looping inside convert_dict(): key="ip_neighbors", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_neighbors" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_neighbors"
INFO:dicttoxml:Inside convert_none(): key="ip_neighbors"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_neighbors" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_neighbors"
INFO:dicttoxml:Looping inside convert_dict(): key="mtu", val="1472", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mtu" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mtu"
INFO:dicttoxml:Inside convert_kv(): key="mtu", val="1472", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mtu" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mtu"
INFO:dicttoxml:Looping inside convert_dict(): key="members", val="{}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "members" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "members"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{}"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan_list", val="[]", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_list" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_list"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_dict(): key="counters", val="{u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 1472, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'ORU', u'RX_DRP': 0}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "counters" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "counters"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 1472, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'ORU', u'RX_DRP': 0}"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_ERR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_ERR"
INFO:dicttoxml:Inside convert_kv(): key="RX_ERR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_ERR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_ERR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_ERR"
INFO:dicttoxml:Inside convert_kv(): key="TX_ERR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_ERR"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_OVR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OVR"
INFO:dicttoxml:Inside convert_kv(): key="RX_OVR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OVR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_OVR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OVR"
INFO:dicttoxml:Inside convert_kv(): key="TX_OVR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OVR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_OK", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OK"
INFO:dicttoxml:Inside convert_kv(): key="TX_OK", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OK"
INFO:dicttoxml:Looping inside convert_dict(): key="MTU", val="1472", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "MTU" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MTU"
INFO:dicttoxml:Inside convert_kv(): key="MTU", val="1472", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "MTU" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MTU"
INFO:dicttoxml:Looping inside convert_dict(): key="Met", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Met" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Met"
INFO:dicttoxml:Inside convert_kv(): key="Met", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Met" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Met"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_OK", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OK"
INFO:dicttoxml:Inside convert_kv(): key="RX_OK", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OK"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_DRP", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_DRP"
INFO:dicttoxml:Inside convert_kv(): key="TX_DRP", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_DRP"
INFO:dicttoxml:Looping inside convert_dict(): key="Flg", val="ORU", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Flg" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Flg"
INFO:dicttoxml:Inside convert_kv(): key="Flg", val="ORU", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Flg" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Flg"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_DRP", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_DRP"
INFO:dicttoxml:Inside convert_kv(): key="RX_DRP", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_DRP"
INFO:dicttoxml:Looping inside convert_dict(): key="linkstate", val="UP", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "linkstate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "linkstate"
INFO:dicttoxml:Inside convert_kv(): key="linkstate", val="UP", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "linkstate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "linkstate"
INFO:dicttoxml:Looping inside convert_dict(): key="summary", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "summary" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "summary"
INFO:dicttoxml:Inside convert_kv(): key="summary", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "summary" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "summary"
INFO:dicttoxml:Looping inside convert_dict(): key="connector_type", val="Unknown", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "connector_type" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "connector_type"
INFO:dicttoxml:Inside convert_kv(): key="connector_type", val="Unknown", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "connector_type" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "connector_type"
INFO:dicttoxml:Looping inside convert_dict(): key="mode", val="Default", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mode" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mode"
INFO:dicttoxml:Inside convert_kv(): key="mode", val="Default", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mode" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mode"
INFO:dicttoxml:Looping inside convert_dict(): key="speed", val="N/A", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "speed" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "speed"
INFO:dicttoxml:Inside convert_kv(): key="speed", val="N/A", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "speed" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "speed"
INFO:dicttoxml:Looping inside convert_dict(): key="lo", val="{u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'127.0.0.1/8', u'::1/128']}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:00:00:00:00:00', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 65536, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 65536, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'LRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'IP: 127.0.0.1/8, ::1/128', u'connector_type': u'Unknown', u'mode': u'Loopback', u'speed': u'N/A'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lo" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lo"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'127.0.0.1/8', u'::1/128']}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:00:00:00:00:00', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 65536, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 65536, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'LRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'IP: 127.0.0.1/8, ::1/128', u'connector_type': u'Unknown', u'mode': u'Loopback', u'speed': u'N/A'}"
INFO:dicttoxml:Looping inside convert_dict(): key="iface_obj", val="{u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'127.0.0.1/8', u'::1/128']}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:00:00:00:00:00', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 65536, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 65536, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'LRU', u'RX_DRP': 0}}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "iface_obj" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "iface_obj"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'127.0.0.1/8', u'::1/128']}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:00:00:00:00:00', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 65536, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 65536, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'LRU', u'RX_DRP': 0}}"
INFO:dicttoxml:Looping inside convert_dict(): key="lldp", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lldp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lldp"
INFO:dicttoxml:Inside convert_none(): key="lldp"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lldp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lldp"
INFO:dicttoxml:Looping inside convert_dict(): key="native_vlan", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "native_vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "native_vlan"
INFO:dicttoxml:Inside convert_none(): key="native_vlan"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "native_vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "native_vlan"
INFO:dicttoxml:Looping inside convert_dict(): key="description", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "description"
INFO:dicttoxml:Inside convert_kv(): key="description", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "description"
INFO:dicttoxml:Looping inside convert_dict(): key="ip_address", val="{u'allentries': [u'127.0.0.1/8', u'::1/128']}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_address" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_address"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'allentries': [u'127.0.0.1/8', u'::1/128']}"
INFO:dicttoxml:Looping inside convert_dict(): key="allentries", val="[u'127.0.0.1/8', u'::1/128']", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "allentries" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "allentries"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_list(): item="127.0.0.1/8", item_name="item", type="unicode"
INFO:dicttoxml:Inside convert_kv(): key="item", val="127.0.0.1/8", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "item" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "item"
INFO:dicttoxml:Looping inside convert_list(): item="::1/128", item_name="item", type="unicode"
INFO:dicttoxml:Inside convert_kv(): key="item", val="::1/128", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "item" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "item"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan"
INFO:dicttoxml:Inside convert_none(): key="vlan"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan"
INFO:dicttoxml:Looping inside convert_dict(): key="asic", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "asic" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "asic"
INFO:dicttoxml:Inside convert_none(): key="asic"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "asic" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "asic"
INFO:dicttoxml:Looping inside convert_dict(): key="dhcp_enabled", val="False", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "dhcp_enabled" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "dhcp_enabled"
INFO:dicttoxml:Inside convert_kv(): key="dhcp_enabled", val="False", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "dhcp_enabled" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "dhcp_enabled"
INFO:dicttoxml:Looping inside convert_dict(): key="lacp", val="{u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lacp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lacp"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}"
INFO:dicttoxml:Looping inside convert_dict(): key="rate", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "rate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "rate"
INFO:dicttoxml:Inside convert_kv(): key="rate", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "rate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "rate"
INFO:dicttoxml:Looping inside convert_dict(): key="bypass", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "bypass" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "bypass"
INFO:dicttoxml:Inside convert_kv(): key="bypass", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "bypass" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "bypass"
INFO:dicttoxml:Looping inside convert_dict(): key="partner_mac", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "partner_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "partner_mac"
INFO:dicttoxml:Inside convert_kv(): key="partner_mac", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "partner_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "partner_mac"
INFO:dicttoxml:Looping inside convert_dict(): key="sys_priority", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "sys_priority" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "sys_priority"
INFO:dicttoxml:Inside convert_kv(): key="sys_priority", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "sys_priority" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "sys_priority"
INFO:dicttoxml:Looping inside convert_dict(): key="mac", val="00:00:00:00:00:00", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mac"
INFO:dicttoxml:Inside convert_kv(): key="mac", val="00:00:00:00:00:00", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mac"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan_filtering", val="False", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_filtering" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_filtering"
INFO:dicttoxml:Inside convert_kv(): key="vlan_filtering", val="False", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_filtering" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_filtering"
INFO:dicttoxml:Looping inside convert_dict(): key="min_links", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "min_links" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "min_links"
INFO:dicttoxml:Inside convert_kv(): key="min_links", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "min_links" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "min_links"
INFO:dicttoxml:Looping inside convert_dict(): key="ip_neighbors", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_neighbors" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_neighbors"
INFO:dicttoxml:Inside convert_none(): key="ip_neighbors"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_neighbors" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_neighbors"
INFO:dicttoxml:Looping inside convert_dict(): key="mtu", val="65536", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mtu" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mtu"
INFO:dicttoxml:Inside convert_kv(): key="mtu", val="65536", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mtu" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mtu"
INFO:dicttoxml:Looping inside convert_dict(): key="members", val="{}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "members" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "members"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{}"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan_list", val="[]", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_list" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_list"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_dict(): key="counters", val="{u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 65536, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'LRU', u'RX_DRP': 0}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "counters" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "counters"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 65536, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'LRU', u'RX_DRP': 0}"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_ERR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_ERR"
INFO:dicttoxml:Inside convert_kv(): key="RX_ERR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_ERR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_ERR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_ERR"
INFO:dicttoxml:Inside convert_kv(): key="TX_ERR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_ERR"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_OVR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OVR"
INFO:dicttoxml:Inside convert_kv(): key="RX_OVR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OVR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_OVR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OVR"
INFO:dicttoxml:Inside convert_kv(): key="TX_OVR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OVR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_OK", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OK"
INFO:dicttoxml:Inside convert_kv(): key="TX_OK", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OK"
INFO:dicttoxml:Looping inside convert_dict(): key="MTU", val="65536", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "MTU" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MTU"
INFO:dicttoxml:Inside convert_kv(): key="MTU", val="65536", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "MTU" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MTU"
INFO:dicttoxml:Looping inside convert_dict(): key="Met", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Met" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Met"
INFO:dicttoxml:Inside convert_kv(): key="Met", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Met" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Met"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_OK", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OK"
INFO:dicttoxml:Inside convert_kv(): key="RX_OK", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OK"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_DRP", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_DRP"
INFO:dicttoxml:Inside convert_kv(): key="TX_DRP", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_DRP"
INFO:dicttoxml:Looping inside convert_dict(): key="Flg", val="LRU", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Flg" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Flg"
INFO:dicttoxml:Inside convert_kv(): key="Flg", val="LRU", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Flg" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Flg"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_DRP", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_DRP"
INFO:dicttoxml:Inside convert_kv(): key="RX_DRP", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_DRP"
INFO:dicttoxml:Looping inside convert_dict(): key="linkstate", val="UP", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "linkstate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "linkstate"
INFO:dicttoxml:Inside convert_kv(): key="linkstate", val="UP", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "linkstate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "linkstate"
INFO:dicttoxml:Looping inside convert_dict(): key="summary", val="IP: 127.0.0.1/8, ::1/128", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "summary" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "summary"
INFO:dicttoxml:Inside convert_kv(): key="summary", val="IP: 127.0.0.1/8, ::1/128", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "summary" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "summary"
INFO:dicttoxml:Looping inside convert_dict(): key="connector_type", val="Unknown", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "connector_type" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "connector_type"
INFO:dicttoxml:Inside convert_kv(): key="connector_type", val="Unknown", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "connector_type" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "connector_type"
INFO:dicttoxml:Looping inside convert_dict(): key="mode", val="Loopback", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mode" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mode"
INFO:dicttoxml:Inside convert_kv(): key="mode", val="Loopback", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mode" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mode"
INFO:dicttoxml:Looping inside convert_dict(): key="speed", val="N/A", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "speed" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "speed"
INFO:dicttoxml:Inside convert_kv(): key="speed", val="N/A", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "speed" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "speed"
ERROR:root:Error while executing net show tets json:ERROR: Command not found.

    net show tets json
             ^ Invalid value here.

Use "net help KEYWORD(s)" to list all options that use KEYWORD(s).

ERROR:root:Only running datastore is accepted as source element in get-config operation. Source : {urn:ietf:params:xml:ns:netconf:base:1.0}candidate
ERROR:root:More than one source element for get-config operation
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7f2d079f5750>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7fbb1fd52750>: ('::ffff:192.168.50.1', 56457, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x1f6997d0L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 56457, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
ERROR:root:More than one source element for get-config operation
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7fbb20808750>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f5dfbb99750>: ('::ffff:192.168.50.1', 56497, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0xfb4e07d0L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 56497, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
ERROR:root:Only running datastore is accepted as source element in get-config operation. Source : {urn:ietf:params:xml:ns:netconf:base:1.0}candidate
ERROR:root:More than one source element for get-config operation
ERROR:root:Only candidate datastore is accepted as target element in get-config operation. Target : {urn:ietf:params:xml:ns:netconf:base:1.0}running
ERROR:root:Only candidate datastore is accepted as target element in get-config operation. Target : {urn:ietf:params:xml:ns:netconf:base:1.0}cmd
ERROR:root:Target element missing in edit-config operation
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7f5dfc64f750>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f02df9dd750>: ('::ffff:192.168.50.1', 56577, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0xdf3247d0L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 56577, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7f02e0493750>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7fcafa634750>: ('::ffff:192.168.50.1', 56587, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0xf9f7b7d0L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 56587, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7fcafb0ea750>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f8e9f8b6750>: ('::ffff:192.168.50.1', 56757, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x9f1fe7d0L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 56757, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7f8ea036e750>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f381a839750>: ('::ffff:192.168.50.1', 56775, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x1a1817d0L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 56775, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
ERROR:root:Only candidate datastore is accepted as target element in get-config operation. Target : {urn:ietf:params:xml:ns:netconf:base:1.0}running
ERROR:root:Target element missing in edit-config operation
ERROR:root:Target element missing in edit-config operation
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7f381b2f1750>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7ff93adf0750>: ('::ffff:192.168.50.1', 56885, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x3a7377d0L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 56885, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7ff93b8a8750>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7fdb9a92d750>: ('::ffff:192.168.50.1', 57133, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x9a275790L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 57133, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7fdb9b3e5750>
INFO:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 57133, 0, 0)): Got channel as None not active so exiting
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7fcccbae7750>: ('::ffff:192.168.50.1', 57173, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0xcb42f790L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 57173, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7fcccc59e750>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7ff91d23f750>: ('::ffff:192.168.50.1', 51725, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x1cb87790L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 51725, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f77a4e75750>: ('::ffff:192.168.50.1', 51042, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0xa47bd790L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 51042, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7f77a592d750>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f4648ce2750>: ('::ffff:192.168.50.1', 51244, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x4862a790L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 51244, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7f4649799750>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7fe597383750>: ('::ffff:192.168.50.1', 51282, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x96ccc790L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 51282, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7fe597e3a750>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7fa1f73da750>: ('::ffff:192.168.50.1', 51290, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0xf6d23790L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 51290, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
ERROR:root:Target element missing in edit-config operation
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7fa1f7e91750>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f54b01c2750>: ('::ffff:192.168.50.1', 51342, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0xafb0a790L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 51342, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
ERROR:root:Target element missing in edit-config operation
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7f54b0c79750>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7fae5d9c0750>: ('::ffff:192.168.50.1', 60798, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x5d308790L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 60798, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7fae5e477750>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f13bff5c750>: ('::ffff:192.168.50.1', 60821, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0xbf8a4790L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 60821, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7f13c0a13750>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f0663abe750>: ('::ffff:192.168.50.1', 60837, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x63406790L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 60837, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7f0664574750>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7fb9802e3750>: ('::ffff:192.168.50.1', 60901, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x7fc2b790L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 60901, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7fb980d99750>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f1a1e0ef750>: ('::ffff:192.168.50.1', 60986, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x1da37790L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 60986, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
ERROR:root:Value of target element missing
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7f1a1eba5750>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f4a7eded750>: ('::ffff:192.168.50.1', 50181, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x7e735790L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 50181, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
ERROR:root:Value of target element missing
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7f4a7f8a3750>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7fb86c8ff750>: ('::ffff:192.168.50.1', 50189, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x6c247790L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 50189, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
ERROR:root:Value of target element missing
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7fb86d3b5750>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f132cbfb750>: ('::ffff:192.168.50.1', 50426, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x2c543790L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 50426, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
ERROR:root:Value of target element missing
ERROR:root:Value of target element missing
ERROR:root:Value of target element missing
ERROR:root:Value of target element missing
DEBUG:paramiko.transport:[chan 0] EOF sent (0)
INFO:paramiko.transport:Disconnect (code 11): Closed due to user request.
INFO:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 50426, 0, 0)): Got channel as None not active so exiting
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f132cbfb7c0>: ('::ffff:192.168.50.1', 50435, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x2d6b07d0L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 50435, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
ERROR:root:Value of target element missing
ERROR:root:"target" element is missing in edit-config operation
ERROR:root:Value of target element missing
ERROR:root:Value of target element missing
ERROR:root:Value of target element missing
ERROR:root:Value of target element missing
ERROR:root:Value of target element missing
ERROR:root:Value of target element missing
ERROR:root:Only candidate datastore is accepted as target element in get-config operation. Target : {urn:ietf:params:xml:ns:netconf:base:1.0}running
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7fac567a7750>: ('::ffff:192.168.50.1', 60587, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x560ef790L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 60587, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7fac5725d750>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7fcb43996750>: ('::ffff:192.168.50.1', 61136, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x432de790L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 61136, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
ERROR:root:"target" element is missing in edit-config operation
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7fcb4444b750>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f2058306750>: ('::ffff:192.168.50.1', 61279, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x57c4e790L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 61279, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7f2058dbc750>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f3ba5af4750>: ('::ffff:192.168.50.1', 57198, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0xa543c790L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 57198, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
INFO:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 57198, 0, 0)): Got channel as None not active so exiting
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7f3ba65aa750>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7fbdc5c2d750>: ('::ffff:192.168.50.1', 57858, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0xc55766d0L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 57858, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7fbdc66e5610>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7ff543aed750>: ('::ffff:192.168.50.1', 57879, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x434366d0L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 57879, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7ff5445a5610>
INFO:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 57879, 0, 0)): Got channel as None not active so exiting
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7faca6c81750>: ('::ffff:192.168.50.1', 56437, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0xa65ca6d0L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 56437, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7faca7739610>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7fa2a34b27c0>: ('::ffff:192.168.50.1', 63169, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0xa2dfc650L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 63169, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7fa2a3f6c590>
ERROR:netconf.server:Deleting NetconfSSHServer(port=8300)
ERROR:netconf.server:Deleting NetconfSSHServer(port=8300)
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f0a51e55750>: ('::ffff:192.168.50.1', 49382, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x5179c710L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 49382, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
ERROR:root:Only running datastore is accepted as source element in get-config operation. Source : {urn:ietf:params:xml:ns:netconf:base:1.0}candidate
INFO:dicttoxml:Inside dicttoxml(): type(obj) is: "dict", obj="{u'memory': 1981648, u'uptime': u'0:07:51.400000', u'hostname': u'cumulus', u'platform': {u'detected': True, u'vendor': u'Cumulus', u'model': u'VX'}, u'build': u'Cumulus Linux 3.7.9', u'os-version': u'3.7.9', u'disk': u'30G', u'lsb-release': u'DISTRIB_ID="Cumulus Linux"\nDISTRIB_RELEASE=3.7.9\nDISTRIB_DESCRIPTION="Cumulus Linux 3.7.9"\n', u'os-description': u'Cumulus Linux 3.7.9', u'eeprom': {u'idString': u'TlvInfo', u'totalLength': 69, u'version': 1, u'tlv': {u'Part Number': {u'index': 36, u'length': 5, u'code': u'0x22', u'value': u'3.7.9'}, u'CRC-32': {u'index': 74, u'length': 4, u'code': u'0xFE', u'value': u'0x82F97EE8'}, u'Device Version': {u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}, u'Serial Number': {u'index': 55, u'length': 17, u'code': u'0x23', u'value': u'00:0c:29:cd:8e:29'}, u'Product Name': {u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}, u'MAC Addresses': {u'index': 43, u'length': 2, u'code': u'0x2A', u'value': u'6'}, u'Base MAC Address': {u'index': 47, u'length': 6, u'code': u'0x24', u'value': u'00:0C:29:CD:8E:29'}, u'Vendor Name': {u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}}, u'validTlvInfoHeader': True}}"
INFO:dicttoxml:Inside convert(). obj type is: "dict", obj="{u'memory': 1981648, u'uptime': u'0:07:51.400000', u'hostname': u'cumulus', u'platform': {u'detected': True, u'vendor': u'Cumulus', u'model': u'VX'}, u'build': u'Cumulus Linux 3.7.9', u'os-version': u'3.7.9', u'disk': u'30G', u'lsb-release': u'DISTRIB_ID="Cumulus Linux"\nDISTRIB_RELEASE=3.7.9\nDISTRIB_DESCRIPTION="Cumulus Linux 3.7.9"\n', u'os-description': u'Cumulus Linux 3.7.9', u'eeprom': {u'idString': u'TlvInfo', u'totalLength': 69, u'version': 1, u'tlv': {u'Part Number': {u'index': 36, u'length': 5, u'code': u'0x22', u'value': u'3.7.9'}, u'CRC-32': {u'index': 74, u'length': 4, u'code': u'0xFE', u'value': u'0x82F97EE8'}, u'Device Version': {u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}, u'Serial Number': {u'index': 55, u'length': 17, u'code': u'0x23', u'value': u'00:0c:29:cd:8e:29'}, u'Product Name': {u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}, u'MAC Addresses': {u'index': 43, u'length': 2, u'code': u'0x2A', u'value': u'6'}, u'Base MAC Address': {u'index': 47, u'length': 6, u'code': u'0x24', u'value': u'00:0C:29:CD:8E:29'}, u'Vendor Name': {u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}}, u'validTlvInfoHeader': True}}"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'memory': 1981648, u'uptime': u'0:07:51.400000', u'hostname': u'cumulus', u'platform': {u'detected': True, u'vendor': u'Cumulus', u'model': u'VX'}, u'build': u'Cumulus Linux 3.7.9', u'os-version': u'3.7.9', u'disk': u'30G', u'lsb-release': u'DISTRIB_ID="Cumulus Linux"\nDISTRIB_RELEASE=3.7.9\nDISTRIB_DESCRIPTION="Cumulus Linux 3.7.9"\n', u'os-description': u'Cumulus Linux 3.7.9', u'eeprom': {u'idString': u'TlvInfo', u'totalLength': 69, u'version': 1, u'tlv': {u'Part Number': {u'index': 36, u'length': 5, u'code': u'0x22', u'value': u'3.7.9'}, u'CRC-32': {u'index': 74, u'length': 4, u'code': u'0xFE', u'value': u'0x82F97EE8'}, u'Device Version': {u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}, u'Serial Number': {u'index': 55, u'length': 17, u'code': u'0x23', u'value': u'00:0c:29:cd:8e:29'}, u'Product Name': {u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}, u'MAC Addresses': {u'index': 43, u'length': 2, u'code': u'0x2A', u'value': u'6'}, u'Base MAC Address': {u'index': 47, u'length': 6, u'code': u'0x24', u'value': u'00:0C:29:CD:8E:29'}, u'Vendor Name': {u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}}, u'validTlvInfoHeader': True}}"
INFO:dicttoxml:Looping inside convert_dict(): key="memory", val="1981648", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "memory" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "memory"
INFO:dicttoxml:Inside convert_kv(): key="memory", val="1981648", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "memory" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "memory"
INFO:dicttoxml:Looping inside convert_dict(): key="uptime", val="0:07:51.400000", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "uptime" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "uptime"
INFO:dicttoxml:Inside convert_kv(): key="uptime", val="0:07:51.400000", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "uptime" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "uptime"
INFO:dicttoxml:Looping inside convert_dict(): key="hostname", val="cumulus", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "hostname" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "hostname"
INFO:dicttoxml:Inside convert_kv(): key="hostname", val="cumulus", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "hostname" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "hostname"
INFO:dicttoxml:Looping inside convert_dict(): key="platform", val="{u'detected': True, u'vendor': u'Cumulus', u'model': u'VX'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "platform" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "platform"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'detected': True, u'vendor': u'Cumulus', u'model': u'VX'}"
INFO:dicttoxml:Looping inside convert_dict(): key="detected", val="True", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "detected" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "detected"
INFO:dicttoxml:Inside convert_kv(): key="detected", val="True", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "detected" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "detected"
INFO:dicttoxml:Looping inside convert_dict(): key="vendor", val="Cumulus", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vendor" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vendor"
INFO:dicttoxml:Inside convert_kv(): key="vendor", val="Cumulus", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vendor" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vendor"
INFO:dicttoxml:Looping inside convert_dict(): key="model", val="VX", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "model" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "model"
INFO:dicttoxml:Inside convert_kv(): key="model", val="VX", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "model" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "model"
INFO:dicttoxml:Looping inside convert_dict(): key="build", val="Cumulus Linux 3.7.9", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "build" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "build"
INFO:dicttoxml:Inside convert_kv(): key="build", val="Cumulus Linux 3.7.9", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "build" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "build"
INFO:dicttoxml:Looping inside convert_dict(): key="os-version", val="3.7.9", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "os-version" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "os-version"
INFO:dicttoxml:Inside convert_kv(): key="os-version", val="3.7.9", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "os-version" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "os-version"
INFO:dicttoxml:Looping inside convert_dict(): key="disk", val="30G", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "disk" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "disk"
INFO:dicttoxml:Inside convert_kv(): key="disk", val="30G", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "disk" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "disk"
INFO:dicttoxml:Looping inside convert_dict(): key="lsb-release", val="DISTRIB_ID="Cumulus Linux"
DISTRIB_RELEASE=3.7.9
DISTRIB_DESCRIPTION="Cumulus Linux 3.7.9"
", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lsb-release" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lsb-release"
INFO:dicttoxml:Inside convert_kv(): key="lsb-release", val="DISTRIB_ID="Cumulus Linux"
DISTRIB_RELEASE=3.7.9
DISTRIB_DESCRIPTION="Cumulus Linux 3.7.9"
", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lsb-release" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lsb-release"
INFO:dicttoxml:Looping inside convert_dict(): key="os-description", val="Cumulus Linux 3.7.9", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "os-description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "os-description"
INFO:dicttoxml:Inside convert_kv(): key="os-description", val="Cumulus Linux 3.7.9", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "os-description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "os-description"
INFO:dicttoxml:Looping inside convert_dict(): key="eeprom", val="{u'idString': u'TlvInfo', u'totalLength': 69, u'version': 1, u'tlv': {u'Part Number': {u'index': 36, u'length': 5, u'code': u'0x22', u'value': u'3.7.9'}, u'CRC-32': {u'index': 74, u'length': 4, u'code': u'0xFE', u'value': u'0x82F97EE8'}, u'Device Version': {u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}, u'Serial Number': {u'index': 55, u'length': 17, u'code': u'0x23', u'value': u'00:0c:29:cd:8e:29'}, u'Product Name': {u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}, u'MAC Addresses': {u'index': 43, u'length': 2, u'code': u'0x2A', u'value': u'6'}, u'Base MAC Address': {u'index': 47, u'length': 6, u'code': u'0x24', u'value': u'00:0C:29:CD:8E:29'}, u'Vendor Name': {u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}}, u'validTlvInfoHeader': True}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "eeprom" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "eeprom"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'idString': u'TlvInfo', u'totalLength': 69, u'version': 1, u'tlv': {u'Part Number': {u'index': 36, u'length': 5, u'code': u'0x22', u'value': u'3.7.9'}, u'CRC-32': {u'index': 74, u'length': 4, u'code': u'0xFE', u'value': u'0x82F97EE8'}, u'Device Version': {u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}, u'Serial Number': {u'index': 55, u'length': 17, u'code': u'0x23', u'value': u'00:0c:29:cd:8e:29'}, u'Product Name': {u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}, u'MAC Addresses': {u'index': 43, u'length': 2, u'code': u'0x2A', u'value': u'6'}, u'Base MAC Address': {u'index': 47, u'length': 6, u'code': u'0x24', u'value': u'00:0C:29:CD:8E:29'}, u'Vendor Name': {u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}}, u'validTlvInfoHeader': True}"
INFO:dicttoxml:Looping inside convert_dict(): key="idString", val="TlvInfo", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "idString" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "idString"
INFO:dicttoxml:Inside convert_kv(): key="idString", val="TlvInfo", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "idString" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "idString"
INFO:dicttoxml:Looping inside convert_dict(): key="totalLength", val="69", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "totalLength" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "totalLength"
INFO:dicttoxml:Inside convert_kv(): key="totalLength", val="69", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "totalLength" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "totalLength"
INFO:dicttoxml:Looping inside convert_dict(): key="version", val="1", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "version" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "version"
INFO:dicttoxml:Inside convert_kv(): key="version", val="1", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "version" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "version"
INFO:dicttoxml:Looping inside convert_dict(): key="tlv", val="{u'Part Number': {u'index': 36, u'length': 5, u'code': u'0x22', u'value': u'3.7.9'}, u'CRC-32': {u'index': 74, u'length': 4, u'code': u'0xFE', u'value': u'0x82F97EE8'}, u'Device Version': {u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}, u'Serial Number': {u'index': 55, u'length': 17, u'code': u'0x23', u'value': u'00:0c:29:cd:8e:29'}, u'Product Name': {u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}, u'MAC Addresses': {u'index': 43, u'length': 2, u'code': u'0x2A', u'value': u'6'}, u'Base MAC Address': {u'index': 47, u'length': 6, u'code': u'0x24', u'value': u'00:0C:29:CD:8E:29'}, u'Vendor Name': {u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "tlv" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "tlv"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'Part Number': {u'index': 36, u'length': 5, u'code': u'0x22', u'value': u'3.7.9'}, u'CRC-32': {u'index': 74, u'length': 4, u'code': u'0xFE', u'value': u'0x82F97EE8'}, u'Device Version': {u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}, u'Serial Number': {u'index': 55, u'length': 17, u'code': u'0x23', u'value': u'00:0c:29:cd:8e:29'}, u'Product Name': {u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}, u'MAC Addresses': {u'index': 43, u'length': 2, u'code': u'0x2A', u'value': u'6'}, u'Base MAC Address': {u'index': 47, u'length': 6, u'code': u'0x24', u'value': u'00:0C:29:CD:8E:29'}, u'Vendor Name': {u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}}"
INFO:dicttoxml:Looping inside convert_dict(): key="Part Number", val="{u'index': 36, u'length': 5, u'code': u'0x22', u'value': u'3.7.9'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Part Number" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Part Number"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Part_Number"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'index': 36, u'length': 5, u'code': u'0x22', u'value': u'3.7.9'}"
INFO:dicttoxml:Looping inside convert_dict(): key="index", val="36", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Inside convert_kv(): key="index", val="36", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Looping inside convert_dict(): key="length", val="5", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Inside convert_kv(): key="length", val="5", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Looping inside convert_dict(): key="code", val="0x22", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Inside convert_kv(): key="code", val="0x22", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Looping inside convert_dict(): key="value", val="3.7.9", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Inside convert_kv(): key="value", val="3.7.9", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Looping inside convert_dict(): key="CRC-32", val="{u'index': 74, u'length': 4, u'code': u'0xFE', u'value': u'0x82F97EE8'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "CRC-32" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "CRC-32"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'index': 74, u'length': 4, u'code': u'0xFE', u'value': u'0x82F97EE8'}"
INFO:dicttoxml:Looping inside convert_dict(): key="index", val="74", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Inside convert_kv(): key="index", val="74", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Looping inside convert_dict(): key="length", val="4", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Inside convert_kv(): key="length", val="4", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Looping inside convert_dict(): key="code", val="0xFE", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Inside convert_kv(): key="code", val="0xFE", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Looping inside convert_dict(): key="value", val="0x82F97EE8", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Inside convert_kv(): key="value", val="0x82F97EE8", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Looping inside convert_dict(): key="Device Version", val="{u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Device Version" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Device Version"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Device_Version"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}"
INFO:dicttoxml:Looping inside convert_dict(): key="index", val="33", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Inside convert_kv(): key="index", val="33", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Looping inside convert_dict(): key="length", val="1", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Inside convert_kv(): key="length", val="1", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Looping inside convert_dict(): key="code", val="0x26", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Inside convert_kv(): key="code", val="0x26", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Looping inside convert_dict(): key="value", val="3", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Inside convert_kv(): key="value", val="3", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Looping inside convert_dict(): key="Serial Number", val="{u'index': 55, u'length': 17, u'code': u'0x23', u'value': u'00:0c:29:cd:8e:29'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Serial Number" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Serial Number"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Serial_Number"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'index': 55, u'length': 17, u'code': u'0x23', u'value': u'00:0c:29:cd:8e:29'}"
INFO:dicttoxml:Looping inside convert_dict(): key="index", val="55", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Inside convert_kv(): key="index", val="55", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Looping inside convert_dict(): key="length", val="17", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Inside convert_kv(): key="length", val="17", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Looping inside convert_dict(): key="code", val="0x23", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Inside convert_kv(): key="code", val="0x23", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Looping inside convert_dict(): key="value", val="00:0c:29:cd:8e:29", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Inside convert_kv(): key="value", val="00:0c:29:cd:8e:29", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Looping inside convert_dict(): key="Product Name", val="{u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Product Name" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Product Name"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Product_Name"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}"
INFO:dicttoxml:Looping inside convert_dict(): key="index", val="29", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Inside convert_kv(): key="index", val="29", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Looping inside convert_dict(): key="length", val="2", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Inside convert_kv(): key="length", val="2", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Looping inside convert_dict(): key="code", val="0x21", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Inside convert_kv(): key="code", val="0x21", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Looping inside convert_dict(): key="value", val="VX", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Inside convert_kv(): key="value", val="VX", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Looping inside convert_dict(): key="MAC Addresses", val="{u'index': 43, u'length': 2, u'code': u'0x2A', u'value': u'6'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "MAC Addresses" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MAC Addresses"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MAC_Addresses"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'index': 43, u'length': 2, u'code': u'0x2A', u'value': u'6'}"
INFO:dicttoxml:Looping inside convert_dict(): key="index", val="43", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Inside convert_kv(): key="index", val="43", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Looping inside convert_dict(): key="length", val="2", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Inside convert_kv(): key="length", val="2", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Looping inside convert_dict(): key="code", val="0x2A", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Inside convert_kv(): key="code", val="0x2A", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Looping inside convert_dict(): key="value", val="6", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Inside convert_kv(): key="value", val="6", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Looping inside convert_dict(): key="Base MAC Address", val="{u'index': 47, u'length': 6, u'code': u'0x24', u'value': u'00:0C:29:CD:8E:29'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Base MAC Address" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Base MAC Address"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Base_MAC_Address"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'index': 47, u'length': 6, u'code': u'0x24', u'value': u'00:0C:29:CD:8E:29'}"
INFO:dicttoxml:Looping inside convert_dict(): key="index", val="47", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Inside convert_kv(): key="index", val="47", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Looping inside convert_dict(): key="length", val="6", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Inside convert_kv(): key="length", val="6", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Looping inside convert_dict(): key="code", val="0x24", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Inside convert_kv(): key="code", val="0x24", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Looping inside convert_dict(): key="value", val="00:0C:29:CD:8E:29", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Inside convert_kv(): key="value", val="00:0C:29:CD:8E:29", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Looping inside convert_dict(): key="Vendor Name", val="{u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Vendor Name" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Vendor Name"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Vendor_Name"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}"
INFO:dicttoxml:Looping inside convert_dict(): key="index", val="11", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Inside convert_kv(): key="index", val="11", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Looping inside convert_dict(): key="length", val="16", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Inside convert_kv(): key="length", val="16", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Looping inside convert_dict(): key="code", val="0x2D", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Inside convert_kv(): key="code", val="0x2D", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Looping inside convert_dict(): key="value", val="Cumulus Networks", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Inside convert_kv(): key="value", val="Cumulus Networks", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Looping inside convert_dict(): key="validTlvInfoHeader", val="True", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "validTlvInfoHeader" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "validTlvInfoHeader"
INFO:dicttoxml:Inside convert_kv(): key="validTlvInfoHeader", val="True", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "validTlvInfoHeader" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "validTlvInfoHeader"
INFO:dicttoxml:Inside dicttoxml(): type(obj) is: "dict", obj="{u'eth0': {u'iface_obj': {u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'00:50:56:c0:00:08', u'adj_mac': u'00:50:56:c0:00:08', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'192.168.50.134/24']}, u'vlan': None, u'asic': None, u'dhcp_enabled': True, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:29', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 1031, u'MTU': 1500, u'Met': 0, u'RX_OK': 1197, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'IP: 192.168.50.134/24(DHCP)', u'connector_type': u'Unknown', u'mode': u'Mgmt', u'speed': u'1G'}, u'bridge': {u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 9, u'MTU': 1500, u'Met': 0, u'RX_OK': 49, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'', u'connector_type': u'Unknown', u'mode': u'Bridge/L2', u'speed': u'N/A'}, u'swp1': {u'iface_obj': {u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'02:00:4c:4f:4f:50', u'adj_mac': u'02:00:4c:4f:4f:50', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': 102, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': [{u'vlan': 102, u'flags': [u'PVID', u'Egress Untagged']}], u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': True, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': u'102', u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 300, u'MTU': 1500, u'Met': 0, u'RX_OK': 51, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'Master: bridge(UP)', u'connector_type': u'Unknown', u'mode': u'Access/L2', u'speed': u'1G'}, u'pimreg': {u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1472, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 1472, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'ORU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'', u'connector_type': u'Unknown', u'mode': u'Default', u'speed': u'N/A'}, u'lo': {u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'127.0.0.1/8', u'::1/128']}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:00:00:00:00:00', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 65536, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 65536, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'LRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'IP: 127.0.0.1/8, ::1/128', u'connector_type': u'Unknown', u'mode': u'Loopback', u'speed': u'N/A'}}"
INFO:dicttoxml:Inside convert(). obj type is: "dict", obj="{u'eth0': {u'iface_obj': {u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'00:50:56:c0:00:08', u'adj_mac': u'00:50:56:c0:00:08', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'192.168.50.134/24']}, u'vlan': None, u'asic': None, u'dhcp_enabled': True, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:29', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 1031, u'MTU': 1500, u'Met': 0, u'RX_OK': 1197, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'IP: 192.168.50.134/24(DHCP)', u'connector_type': u'Unknown', u'mode': u'Mgmt', u'speed': u'1G'}, u'bridge': {u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 9, u'MTU': 1500, u'Met': 0, u'RX_OK': 49, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'', u'connector_type': u'Unknown', u'mode': u'Bridge/L2', u'speed': u'N/A'}, u'swp1': {u'iface_obj': {u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'02:00:4c:4f:4f:50', u'adj_mac': u'02:00:4c:4f:4f:50', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': 102, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': [{u'vlan': 102, u'flags': [u'PVID', u'Egress Untagged']}], u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': True, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': u'102', u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 300, u'MTU': 1500, u'Met': 0, u'RX_OK': 51, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'Master: bridge(UP)', u'connector_type': u'Unknown', u'mode': u'Access/L2', u'speed': u'1G'}, u'pimreg': {u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1472, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 1472, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'ORU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'', u'connector_type': u'Unknown', u'mode': u'Default', u'speed': u'N/A'}, u'lo': {u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'127.0.0.1/8', u'::1/128']}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:00:00:00:00:00', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 65536, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 65536, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'LRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'IP: 127.0.0.1/8, ::1/128', u'connector_type': u'Unknown', u'mode': u'Loopback', u'speed': u'N/A'}}"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'eth0': {u'iface_obj': {u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'00:50:56:c0:00:08', u'adj_mac': u'00:50:56:c0:00:08', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'192.168.50.134/24']}, u'vlan': None, u'asic': None, u'dhcp_enabled': True, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:29', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 1031, u'MTU': 1500, u'Met': 0, u'RX_OK': 1197, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'IP: 192.168.50.134/24(DHCP)', u'connector_type': u'Unknown', u'mode': u'Mgmt', u'speed': u'1G'}, u'bridge': {u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 9, u'MTU': 1500, u'Met': 0, u'RX_OK': 49, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'', u'connector_type': u'Unknown', u'mode': u'Bridge/L2', u'speed': u'N/A'}, u'swp1': {u'iface_obj': {u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'02:00:4c:4f:4f:50', u'adj_mac': u'02:00:4c:4f:4f:50', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': 102, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': [{u'vlan': 102, u'flags': [u'PVID', u'Egress Untagged']}], u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': True, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': u'102', u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 300, u'MTU': 1500, u'Met': 0, u'RX_OK': 51, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'Master: bridge(UP)', u'connector_type': u'Unknown', u'mode': u'Access/L2', u'speed': u'1G'}, u'pimreg': {u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1472, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 1472, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'ORU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'', u'connector_type': u'Unknown', u'mode': u'Default', u'speed': u'N/A'}, u'lo': {u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'127.0.0.1/8', u'::1/128']}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:00:00:00:00:00', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 65536, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 65536, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'LRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'IP: 127.0.0.1/8, ::1/128', u'connector_type': u'Unknown', u'mode': u'Loopback', u'speed': u'N/A'}}"
INFO:dicttoxml:Looping inside convert_dict(): key="eth0", val="{u'iface_obj': {u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'00:50:56:c0:00:08', u'adj_mac': u'00:50:56:c0:00:08', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'192.168.50.134/24']}, u'vlan': None, u'asic': None, u'dhcp_enabled': True, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:29', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 1031, u'MTU': 1500, u'Met': 0, u'RX_OK': 1197, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'IP: 192.168.50.134/24(DHCP)', u'connector_type': u'Unknown', u'mode': u'Mgmt', u'speed': u'1G'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "eth0" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "eth0"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'iface_obj': {u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'00:50:56:c0:00:08', u'adj_mac': u'00:50:56:c0:00:08', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'192.168.50.134/24']}, u'vlan': None, u'asic': None, u'dhcp_enabled': True, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:29', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 1031, u'MTU': 1500, u'Met': 0, u'RX_OK': 1197, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'IP: 192.168.50.134/24(DHCP)', u'connector_type': u'Unknown', u'mode': u'Mgmt', u'speed': u'1G'}"
INFO:dicttoxml:Looping inside convert_dict(): key="iface_obj", val="{u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'00:50:56:c0:00:08', u'adj_mac': u'00:50:56:c0:00:08', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'192.168.50.134/24']}, u'vlan': None, u'asic': None, u'dhcp_enabled': True, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:29', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 1031, u'MTU': 1500, u'Met': 0, u'RX_OK': 1197, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "iface_obj" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "iface_obj"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'00:50:56:c0:00:08', u'adj_mac': u'00:50:56:c0:00:08', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'192.168.50.134/24']}, u'vlan': None, u'asic': None, u'dhcp_enabled': True, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:29', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 1031, u'MTU': 1500, u'Met': 0, u'RX_OK': 1197, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}"
INFO:dicttoxml:Looping inside convert_dict(): key="lldp", val="[{u'adj_ttl': u'3601', u'adj_port': u'00:50:56:c0:00:08', u'adj_mac': u'00:50:56:c0:00:08', u'adj_hostname': None, u'system_descr': None}]", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lldp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lldp"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_list(): item="{u'adj_ttl': u'3601', u'adj_port': u'00:50:56:c0:00:08', u'adj_mac': u'00:50:56:c0:00:08', u'adj_hostname': None, u'system_descr': None}", item_name="item", type="dict"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'adj_ttl': u'3601', u'adj_port': u'00:50:56:c0:00:08', u'adj_mac': u'00:50:56:c0:00:08', u'adj_hostname': None, u'system_descr': None}"
INFO:dicttoxml:Looping inside convert_dict(): key="adj_ttl", val="3601", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_ttl" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_ttl"
INFO:dicttoxml:Inside convert_kv(): key="adj_ttl", val="3601", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_ttl" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_ttl"
INFO:dicttoxml:Looping inside convert_dict(): key="adj_port", val="00:50:56:c0:00:08", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_port" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_port"
INFO:dicttoxml:Inside convert_kv(): key="adj_port", val="00:50:56:c0:00:08", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_port" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_port"
INFO:dicttoxml:Looping inside convert_dict(): key="adj_mac", val="00:50:56:c0:00:08", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_mac"
INFO:dicttoxml:Inside convert_kv(): key="adj_mac", val="00:50:56:c0:00:08", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_mac"
INFO:dicttoxml:Looping inside convert_dict(): key="adj_hostname", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_hostname" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_hostname"
INFO:dicttoxml:Inside convert_none(): key="adj_hostname"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_hostname" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_hostname"
INFO:dicttoxml:Looping inside convert_dict(): key="system_descr", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "system_descr" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "system_descr"
INFO:dicttoxml:Inside convert_none(): key="system_descr"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "system_descr" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "system_descr"
INFO:dicttoxml:Looping inside convert_dict(): key="native_vlan", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "native_vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "native_vlan"
INFO:dicttoxml:Inside convert_none(): key="native_vlan"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "native_vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "native_vlan"
INFO:dicttoxml:Looping inside convert_dict(): key="description", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "description"
INFO:dicttoxml:Inside convert_kv(): key="description", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "description"
INFO:dicttoxml:Looping inside convert_dict(): key="ip_address", val="{u'allentries': [u'192.168.50.134/24']}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_address" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_address"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'allentries': [u'192.168.50.134/24']}"
INFO:dicttoxml:Looping inside convert_dict(): key="allentries", val="[u'192.168.50.134/24']", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "allentries" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "allentries"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_list(): item="192.168.50.134/24", item_name="item", type="unicode"
INFO:dicttoxml:Inside convert_kv(): key="item", val="192.168.50.134/24", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "item" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "item"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan"
INFO:dicttoxml:Inside convert_none(): key="vlan"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan"
INFO:dicttoxml:Looping inside convert_dict(): key="asic", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "asic" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "asic"
INFO:dicttoxml:Inside convert_none(): key="asic"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "asic" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "asic"
INFO:dicttoxml:Looping inside convert_dict(): key="dhcp_enabled", val="True", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "dhcp_enabled" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "dhcp_enabled"
INFO:dicttoxml:Inside convert_kv(): key="dhcp_enabled", val="True", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "dhcp_enabled" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "dhcp_enabled"
INFO:dicttoxml:Looping inside convert_dict(): key="lacp", val="{u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lacp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lacp"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}"
INFO:dicttoxml:Looping inside convert_dict(): key="rate", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "rate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "rate"
INFO:dicttoxml:Inside convert_kv(): key="rate", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "rate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "rate"
INFO:dicttoxml:Looping inside convert_dict(): key="bypass", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "bypass" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "bypass"
INFO:dicttoxml:Inside convert_kv(): key="bypass", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "bypass" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "bypass"
INFO:dicttoxml:Looping inside convert_dict(): key="partner_mac", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "partner_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "partner_mac"
INFO:dicttoxml:Inside convert_kv(): key="partner_mac", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "partner_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "partner_mac"
INFO:dicttoxml:Looping inside convert_dict(): key="sys_priority", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "sys_priority" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "sys_priority"
INFO:dicttoxml:Inside convert_kv(): key="sys_priority", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "sys_priority" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "sys_priority"
INFO:dicttoxml:Looping inside convert_dict(): key="mac", val="00:0c:29:cd:8e:29", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mac"
INFO:dicttoxml:Inside convert_kv(): key="mac", val="00:0c:29:cd:8e:29", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mac"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan_filtering", val="False", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_filtering" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_filtering"
INFO:dicttoxml:Inside convert_kv(): key="vlan_filtering", val="False", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_filtering" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_filtering"
INFO:dicttoxml:Looping inside convert_dict(): key="min_links", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "min_links" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "min_links"
INFO:dicttoxml:Inside convert_kv(): key="min_links", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "min_links" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "min_links"
INFO:dicttoxml:Looping inside convert_dict(): key="ip_neighbors", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_neighbors" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_neighbors"
INFO:dicttoxml:Inside convert_none(): key="ip_neighbors"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_neighbors" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_neighbors"
INFO:dicttoxml:Looping inside convert_dict(): key="mtu", val="1500", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mtu" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mtu"
INFO:dicttoxml:Inside convert_kv(): key="mtu", val="1500", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mtu" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mtu"
INFO:dicttoxml:Looping inside convert_dict(): key="members", val="{}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "members" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "members"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{}"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan_list", val="[]", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_list" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_list"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_dict(): key="counters", val="{u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 1031, u'MTU': 1500, u'Met': 0, u'RX_OK': 1197, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "counters" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "counters"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 1031, u'MTU': 1500, u'Met': 0, u'RX_OK': 1197, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_ERR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_ERR"
INFO:dicttoxml:Inside convert_kv(): key="RX_ERR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_ERR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_ERR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_ERR"
INFO:dicttoxml:Inside convert_kv(): key="TX_ERR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_ERR"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_OVR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OVR"
INFO:dicttoxml:Inside convert_kv(): key="RX_OVR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OVR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_OVR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OVR"
INFO:dicttoxml:Inside convert_kv(): key="TX_OVR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OVR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_OK", val="1031", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OK"
INFO:dicttoxml:Inside convert_kv(): key="TX_OK", val="1031", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OK"
INFO:dicttoxml:Looping inside convert_dict(): key="MTU", val="1500", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "MTU" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MTU"
INFO:dicttoxml:Inside convert_kv(): key="MTU", val="1500", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "MTU" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MTU"
INFO:dicttoxml:Looping inside convert_dict(): key="Met", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Met" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Met"
INFO:dicttoxml:Inside convert_kv(): key="Met", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Met" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Met"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_OK", val="1197", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OK"
INFO:dicttoxml:Inside convert_kv(): key="RX_OK", val="1197", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OK"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_DRP", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_DRP"
INFO:dicttoxml:Inside convert_kv(): key="TX_DRP", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_DRP"
INFO:dicttoxml:Looping inside convert_dict(): key="Flg", val="BMRU", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Flg" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Flg"
INFO:dicttoxml:Inside convert_kv(): key="Flg", val="BMRU", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Flg" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Flg"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_DRP", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_DRP"
INFO:dicttoxml:Inside convert_kv(): key="RX_DRP", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_DRP"
INFO:dicttoxml:Looping inside convert_dict(): key="linkstate", val="UP", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "linkstate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "linkstate"
INFO:dicttoxml:Inside convert_kv(): key="linkstate", val="UP", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "linkstate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "linkstate"
INFO:dicttoxml:Looping inside convert_dict(): key="summary", val="IP: 192.168.50.134/24(DHCP)", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "summary" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "summary"
INFO:dicttoxml:Inside convert_kv(): key="summary", val="IP: 192.168.50.134/24(DHCP)", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "summary" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "summary"
INFO:dicttoxml:Looping inside convert_dict(): key="connector_type", val="Unknown", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "connector_type" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "connector_type"
INFO:dicttoxml:Inside convert_kv(): key="connector_type", val="Unknown", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "connector_type" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "connector_type"
INFO:dicttoxml:Looping inside convert_dict(): key="mode", val="Mgmt", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mode" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mode"
INFO:dicttoxml:Inside convert_kv(): key="mode", val="Mgmt", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mode" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mode"
INFO:dicttoxml:Looping inside convert_dict(): key="speed", val="1G", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "speed" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "speed"
INFO:dicttoxml:Inside convert_kv(): key="speed", val="1G", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "speed" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "speed"
INFO:dicttoxml:Looping inside convert_dict(): key="bridge", val="{u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 9, u'MTU': 1500, u'Met': 0, u'RX_OK': 49, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'', u'connector_type': u'Unknown', u'mode': u'Bridge/L2', u'speed': u'N/A'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "bridge" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "bridge"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 9, u'MTU': 1500, u'Met': 0, u'RX_OK': 49, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'', u'connector_type': u'Unknown', u'mode': u'Bridge/L2', u'speed': u'N/A'}"
INFO:dicttoxml:Looping inside convert_dict(): key="iface_obj", val="{u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 9, u'MTU': 1500, u'Met': 0, u'RX_OK': 49, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "iface_obj" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "iface_obj"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 9, u'MTU': 1500, u'Met': 0, u'RX_OK': 49, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}"
INFO:dicttoxml:Looping inside convert_dict(): key="lldp", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lldp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lldp"
INFO:dicttoxml:Inside convert_none(): key="lldp"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lldp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lldp"
INFO:dicttoxml:Looping inside convert_dict(): key="native_vlan", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "native_vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "native_vlan"
INFO:dicttoxml:Inside convert_none(): key="native_vlan"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "native_vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "native_vlan"
INFO:dicttoxml:Looping inside convert_dict(): key="description", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "description"
INFO:dicttoxml:Inside convert_kv(): key="description", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "description"
INFO:dicttoxml:Looping inside convert_dict(): key="ip_address", val="{u'allentries': []}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_address" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_address"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'allentries': []}"
INFO:dicttoxml:Looping inside convert_dict(): key="allentries", val="[]", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "allentries" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "allentries"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_dict(): key="vlan", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan"
INFO:dicttoxml:Inside convert_none(): key="vlan"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan"
INFO:dicttoxml:Looping inside convert_dict(): key="asic", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "asic" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "asic"
INFO:dicttoxml:Inside convert_none(): key="asic"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "asic" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "asic"
INFO:dicttoxml:Looping inside convert_dict(): key="dhcp_enabled", val="False", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "dhcp_enabled" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "dhcp_enabled"
INFO:dicttoxml:Inside convert_kv(): key="dhcp_enabled", val="False", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "dhcp_enabled" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "dhcp_enabled"
INFO:dicttoxml:Looping inside convert_dict(): key="lacp", val="{u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lacp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lacp"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}"
INFO:dicttoxml:Looping inside convert_dict(): key="rate", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "rate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "rate"
INFO:dicttoxml:Inside convert_kv(): key="rate", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "rate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "rate"
INFO:dicttoxml:Looping inside convert_dict(): key="bypass", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "bypass" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "bypass"
INFO:dicttoxml:Inside convert_kv(): key="bypass", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "bypass" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "bypass"
INFO:dicttoxml:Looping inside convert_dict(): key="partner_mac", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "partner_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "partner_mac"
INFO:dicttoxml:Inside convert_kv(): key="partner_mac", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "partner_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "partner_mac"
INFO:dicttoxml:Looping inside convert_dict(): key="sys_priority", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "sys_priority" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "sys_priority"
INFO:dicttoxml:Inside convert_kv(): key="sys_priority", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "sys_priority" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "sys_priority"
INFO:dicttoxml:Looping inside convert_dict(): key="mac", val="00:0c:29:cd:8e:33", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mac"
INFO:dicttoxml:Inside convert_kv(): key="mac", val="00:0c:29:cd:8e:33", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mac"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan_filtering", val="False", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_filtering" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_filtering"
INFO:dicttoxml:Inside convert_kv(): key="vlan_filtering", val="False", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_filtering" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_filtering"
INFO:dicttoxml:Looping inside convert_dict(): key="min_links", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "min_links" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "min_links"
INFO:dicttoxml:Inside convert_kv(): key="min_links", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "min_links" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "min_links"
INFO:dicttoxml:Looping inside convert_dict(): key="ip_neighbors", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_neighbors" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_neighbors"
INFO:dicttoxml:Inside convert_none(): key="ip_neighbors"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_neighbors" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_neighbors"
INFO:dicttoxml:Looping inside convert_dict(): key="mtu", val="1500", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mtu" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mtu"
INFO:dicttoxml:Inside convert_kv(): key="mtu", val="1500", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mtu" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mtu"
INFO:dicttoxml:Looping inside convert_dict(): key="members", val="{}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "members" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "members"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{}"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan_list", val="[]", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_list" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_list"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_dict(): key="counters", val="{u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 9, u'MTU': 1500, u'Met': 0, u'RX_OK': 49, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "counters" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "counters"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 9, u'MTU': 1500, u'Met': 0, u'RX_OK': 49, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_ERR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_ERR"
INFO:dicttoxml:Inside convert_kv(): key="RX_ERR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_ERR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_ERR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_ERR"
INFO:dicttoxml:Inside convert_kv(): key="TX_ERR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_ERR"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_OVR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OVR"
INFO:dicttoxml:Inside convert_kv(): key="RX_OVR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OVR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_OVR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OVR"
INFO:dicttoxml:Inside convert_kv(): key="TX_OVR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OVR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_OK", val="9", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OK"
INFO:dicttoxml:Inside convert_kv(): key="TX_OK", val="9", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OK"
INFO:dicttoxml:Looping inside convert_dict(): key="MTU", val="1500", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "MTU" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MTU"
INFO:dicttoxml:Inside convert_kv(): key="MTU", val="1500", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "MTU" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MTU"
INFO:dicttoxml:Looping inside convert_dict(): key="Met", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Met" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Met"
INFO:dicttoxml:Inside convert_kv(): key="Met", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Met" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Met"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_OK", val="49", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OK"
INFO:dicttoxml:Inside convert_kv(): key="RX_OK", val="49", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OK"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_DRP", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_DRP"
INFO:dicttoxml:Inside convert_kv(): key="TX_DRP", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_DRP"
INFO:dicttoxml:Looping inside convert_dict(): key="Flg", val="BMRU", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Flg" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Flg"
INFO:dicttoxml:Inside convert_kv(): key="Flg", val="BMRU", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Flg" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Flg"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_DRP", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_DRP"
INFO:dicttoxml:Inside convert_kv(): key="RX_DRP", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_DRP"
INFO:dicttoxml:Looping inside convert_dict(): key="linkstate", val="UP", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "linkstate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "linkstate"
INFO:dicttoxml:Inside convert_kv(): key="linkstate", val="UP", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "linkstate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "linkstate"
INFO:dicttoxml:Looping inside convert_dict(): key="summary", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "summary" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "summary"
INFO:dicttoxml:Inside convert_kv(): key="summary", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "summary" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "summary"
INFO:dicttoxml:Looping inside convert_dict(): key="connector_type", val="Unknown", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "connector_type" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "connector_type"
INFO:dicttoxml:Inside convert_kv(): key="connector_type", val="Unknown", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "connector_type" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "connector_type"
INFO:dicttoxml:Looping inside convert_dict(): key="mode", val="Bridge/L2", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mode" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mode"
INFO:dicttoxml:Inside convert_kv(): key="mode", val="Bridge/L2", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mode" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mode"
INFO:dicttoxml:Looping inside convert_dict(): key="speed", val="N/A", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "speed" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "speed"
INFO:dicttoxml:Inside convert_kv(): key="speed", val="N/A", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "speed" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "speed"
INFO:dicttoxml:Looping inside convert_dict(): key="swp1", val="{u'iface_obj': {u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'02:00:4c:4f:4f:50', u'adj_mac': u'02:00:4c:4f:4f:50', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': 102, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': [{u'vlan': 102, u'flags': [u'PVID', u'Egress Untagged']}], u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': True, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': u'102', u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 300, u'MTU': 1500, u'Met': 0, u'RX_OK': 51, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'Master: bridge(UP)', u'connector_type': u'Unknown', u'mode': u'Access/L2', u'speed': u'1G'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "swp1" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "swp1"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'iface_obj': {u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'02:00:4c:4f:4f:50', u'adj_mac': u'02:00:4c:4f:4f:50', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': 102, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': [{u'vlan': 102, u'flags': [u'PVID', u'Egress Untagged']}], u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': True, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': u'102', u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 300, u'MTU': 1500, u'Met': 0, u'RX_OK': 51, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'Master: bridge(UP)', u'connector_type': u'Unknown', u'mode': u'Access/L2', u'speed': u'1G'}"
INFO:dicttoxml:Looping inside convert_dict(): key="iface_obj", val="{u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'02:00:4c:4f:4f:50', u'adj_mac': u'02:00:4c:4f:4f:50', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': 102, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': [{u'vlan': 102, u'flags': [u'PVID', u'Egress Untagged']}], u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': True, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': u'102', u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 300, u'MTU': 1500, u'Met': 0, u'RX_OK': 51, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "iface_obj" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "iface_obj"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'lldp': [{u'adj_ttl': u'3601', u'adj_port': u'02:00:4c:4f:4f:50', u'adj_mac': u'02:00:4c:4f:4f:50', u'adj_hostname': None, u'system_descr': None}], u'native_vlan': 102, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': [{u'vlan': 102, u'flags': [u'PVID', u'Egress Untagged']}], u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:0c:29:cd:8e:33', u'vlan_filtering': True, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1500, u'members': {}, u'vlan_list': u'102', u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 300, u'MTU': 1500, u'Met': 0, u'RX_OK': 51, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}}"
INFO:dicttoxml:Looping inside convert_dict(): key="lldp", val="[{u'adj_ttl': u'3601', u'adj_port': u'02:00:4c:4f:4f:50', u'adj_mac': u'02:00:4c:4f:4f:50', u'adj_hostname': None, u'system_descr': None}]", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lldp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lldp"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_list(): item="{u'adj_ttl': u'3601', u'adj_port': u'02:00:4c:4f:4f:50', u'adj_mac': u'02:00:4c:4f:4f:50', u'adj_hostname': None, u'system_descr': None}", item_name="item", type="dict"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'adj_ttl': u'3601', u'adj_port': u'02:00:4c:4f:4f:50', u'adj_mac': u'02:00:4c:4f:4f:50', u'adj_hostname': None, u'system_descr': None}"
INFO:dicttoxml:Looping inside convert_dict(): key="adj_ttl", val="3601", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_ttl" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_ttl"
INFO:dicttoxml:Inside convert_kv(): key="adj_ttl", val="3601", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_ttl" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_ttl"
INFO:dicttoxml:Looping inside convert_dict(): key="adj_port", val="02:00:4c:4f:4f:50", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_port" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_port"
INFO:dicttoxml:Inside convert_kv(): key="adj_port", val="02:00:4c:4f:4f:50", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_port" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_port"
INFO:dicttoxml:Looping inside convert_dict(): key="adj_mac", val="02:00:4c:4f:4f:50", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_mac"
INFO:dicttoxml:Inside convert_kv(): key="adj_mac", val="02:00:4c:4f:4f:50", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_mac"
INFO:dicttoxml:Looping inside convert_dict(): key="adj_hostname", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_hostname" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_hostname"
INFO:dicttoxml:Inside convert_none(): key="adj_hostname"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "adj_hostname" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "adj_hostname"
INFO:dicttoxml:Looping inside convert_dict(): key="system_descr", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "system_descr" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "system_descr"
INFO:dicttoxml:Inside convert_none(): key="system_descr"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "system_descr" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "system_descr"
INFO:dicttoxml:Looping inside convert_dict(): key="native_vlan", val="102", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "native_vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "native_vlan"
INFO:dicttoxml:Inside convert_kv(): key="native_vlan", val="102", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "native_vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "native_vlan"
INFO:dicttoxml:Looping inside convert_dict(): key="description", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "description"
INFO:dicttoxml:Inside convert_kv(): key="description", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "description"
INFO:dicttoxml:Looping inside convert_dict(): key="ip_address", val="{u'allentries': []}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_address" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_address"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'allentries': []}"
INFO:dicttoxml:Looping inside convert_dict(): key="allentries", val="[]", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "allentries" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "allentries"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_dict(): key="vlan", val="[{u'vlan': 102, u'flags': [u'PVID', u'Egress Untagged']}]", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_list(): item="{u'vlan': 102, u'flags': [u'PVID', u'Egress Untagged']}", item_name="item", type="dict"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'vlan': 102, u'flags': [u'PVID', u'Egress Untagged']}"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan", val="102", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan"
INFO:dicttoxml:Inside convert_kv(): key="vlan", val="102", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan"
INFO:dicttoxml:Looping inside convert_dict(): key="flags", val="[u'PVID', u'Egress Untagged']", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "flags" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "flags"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_list(): item="PVID", item_name="item", type="unicode"
INFO:dicttoxml:Inside convert_kv(): key="item", val="PVID", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "item" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "item"
INFO:dicttoxml:Looping inside convert_list(): item="Egress Untagged", item_name="item", type="unicode"
INFO:dicttoxml:Inside convert_kv(): key="item", val="Egress Untagged", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "item" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "item"
INFO:dicttoxml:Looping inside convert_dict(): key="asic", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "asic" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "asic"
INFO:dicttoxml:Inside convert_none(): key="asic"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "asic" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "asic"
INFO:dicttoxml:Looping inside convert_dict(): key="dhcp_enabled", val="False", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "dhcp_enabled" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "dhcp_enabled"
INFO:dicttoxml:Inside convert_kv(): key="dhcp_enabled", val="False", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "dhcp_enabled" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "dhcp_enabled"
INFO:dicttoxml:Looping inside convert_dict(): key="lacp", val="{u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lacp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lacp"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}"
INFO:dicttoxml:Looping inside convert_dict(): key="rate", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "rate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "rate"
INFO:dicttoxml:Inside convert_kv(): key="rate", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "rate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "rate"
INFO:dicttoxml:Looping inside convert_dict(): key="bypass", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "bypass" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "bypass"
INFO:dicttoxml:Inside convert_kv(): key="bypass", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "bypass" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "bypass"
INFO:dicttoxml:Looping inside convert_dict(): key="partner_mac", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "partner_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "partner_mac"
INFO:dicttoxml:Inside convert_kv(): key="partner_mac", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "partner_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "partner_mac"
INFO:dicttoxml:Looping inside convert_dict(): key="sys_priority", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "sys_priority" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "sys_priority"
INFO:dicttoxml:Inside convert_kv(): key="sys_priority", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "sys_priority" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "sys_priority"
INFO:dicttoxml:Looping inside convert_dict(): key="mac", val="00:0c:29:cd:8e:33", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mac"
INFO:dicttoxml:Inside convert_kv(): key="mac", val="00:0c:29:cd:8e:33", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mac"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan_filtering", val="True", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_filtering" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_filtering"
INFO:dicttoxml:Inside convert_kv(): key="vlan_filtering", val="True", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_filtering" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_filtering"
INFO:dicttoxml:Looping inside convert_dict(): key="min_links", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "min_links" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "min_links"
INFO:dicttoxml:Inside convert_kv(): key="min_links", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "min_links" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "min_links"
INFO:dicttoxml:Looping inside convert_dict(): key="ip_neighbors", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_neighbors" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_neighbors"
INFO:dicttoxml:Inside convert_none(): key="ip_neighbors"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_neighbors" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_neighbors"
INFO:dicttoxml:Looping inside convert_dict(): key="mtu", val="1500", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mtu" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mtu"
INFO:dicttoxml:Inside convert_kv(): key="mtu", val="1500", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mtu" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mtu"
INFO:dicttoxml:Looping inside convert_dict(): key="members", val="{}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "members" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "members"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{}"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan_list", val="102", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_list" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_list"
INFO:dicttoxml:Inside convert_kv(): key="vlan_list", val="102", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_list" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_list"
INFO:dicttoxml:Looping inside convert_dict(): key="counters", val="{u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 300, u'MTU': 1500, u'Met': 0, u'RX_OK': 51, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "counters" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "counters"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 300, u'MTU': 1500, u'Met': 0, u'RX_OK': 51, u'TX_DRP': 0, u'Flg': u'BMRU', u'RX_DRP': 0}"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_ERR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_ERR"
INFO:dicttoxml:Inside convert_kv(): key="RX_ERR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_ERR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_ERR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_ERR"
INFO:dicttoxml:Inside convert_kv(): key="TX_ERR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_ERR"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_OVR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OVR"
INFO:dicttoxml:Inside convert_kv(): key="RX_OVR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OVR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_OVR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OVR"
INFO:dicttoxml:Inside convert_kv(): key="TX_OVR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OVR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_OK", val="300", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OK"
INFO:dicttoxml:Inside convert_kv(): key="TX_OK", val="300", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OK"
INFO:dicttoxml:Looping inside convert_dict(): key="MTU", val="1500", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "MTU" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MTU"
INFO:dicttoxml:Inside convert_kv(): key="MTU", val="1500", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "MTU" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MTU"
INFO:dicttoxml:Looping inside convert_dict(): key="Met", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Met" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Met"
INFO:dicttoxml:Inside convert_kv(): key="Met", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Met" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Met"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_OK", val="51", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OK"
INFO:dicttoxml:Inside convert_kv(): key="RX_OK", val="51", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OK"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_DRP", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_DRP"
INFO:dicttoxml:Inside convert_kv(): key="TX_DRP", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_DRP"
INFO:dicttoxml:Looping inside convert_dict(): key="Flg", val="BMRU", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Flg" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Flg"
INFO:dicttoxml:Inside convert_kv(): key="Flg", val="BMRU", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Flg" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Flg"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_DRP", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_DRP"
INFO:dicttoxml:Inside convert_kv(): key="RX_DRP", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_DRP"
INFO:dicttoxml:Looping inside convert_dict(): key="linkstate", val="UP", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "linkstate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "linkstate"
INFO:dicttoxml:Inside convert_kv(): key="linkstate", val="UP", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "linkstate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "linkstate"
INFO:dicttoxml:Looping inside convert_dict(): key="summary", val="Master: bridge(UP)", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "summary" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "summary"
INFO:dicttoxml:Inside convert_kv(): key="summary", val="Master: bridge(UP)", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "summary" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "summary"
INFO:dicttoxml:Looping inside convert_dict(): key="connector_type", val="Unknown", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "connector_type" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "connector_type"
INFO:dicttoxml:Inside convert_kv(): key="connector_type", val="Unknown", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "connector_type" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "connector_type"
INFO:dicttoxml:Looping inside convert_dict(): key="mode", val="Access/L2", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mode" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mode"
INFO:dicttoxml:Inside convert_kv(): key="mode", val="Access/L2", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mode" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mode"
INFO:dicttoxml:Looping inside convert_dict(): key="speed", val="1G", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "speed" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "speed"
INFO:dicttoxml:Inside convert_kv(): key="speed", val="1G", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "speed" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "speed"
INFO:dicttoxml:Looping inside convert_dict(): key="pimreg", val="{u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1472, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 1472, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'ORU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'', u'connector_type': u'Unknown', u'mode': u'Default', u'speed': u'N/A'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "pimreg" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "pimreg"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1472, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 1472, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'ORU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'', u'connector_type': u'Unknown', u'mode': u'Default', u'speed': u'N/A'}"
INFO:dicttoxml:Looping inside convert_dict(): key="iface_obj", val="{u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1472, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 1472, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'ORU', u'RX_DRP': 0}}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "iface_obj" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "iface_obj"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': []}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 1472, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 1472, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'ORU', u'RX_DRP': 0}}"
INFO:dicttoxml:Looping inside convert_dict(): key="lldp", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lldp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lldp"
INFO:dicttoxml:Inside convert_none(): key="lldp"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lldp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lldp"
INFO:dicttoxml:Looping inside convert_dict(): key="native_vlan", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "native_vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "native_vlan"
INFO:dicttoxml:Inside convert_none(): key="native_vlan"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "native_vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "native_vlan"
INFO:dicttoxml:Looping inside convert_dict(): key="description", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "description"
INFO:dicttoxml:Inside convert_kv(): key="description", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "description"
INFO:dicttoxml:Looping inside convert_dict(): key="ip_address", val="{u'allentries': []}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_address" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_address"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'allentries': []}"
INFO:dicttoxml:Looping inside convert_dict(): key="allentries", val="[]", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "allentries" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "allentries"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_dict(): key="vlan", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan"
INFO:dicttoxml:Inside convert_none(): key="vlan"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan"
INFO:dicttoxml:Looping inside convert_dict(): key="asic", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "asic" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "asic"
INFO:dicttoxml:Inside convert_none(): key="asic"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "asic" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "asic"
INFO:dicttoxml:Looping inside convert_dict(): key="dhcp_enabled", val="False", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "dhcp_enabled" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "dhcp_enabled"
INFO:dicttoxml:Inside convert_kv(): key="dhcp_enabled", val="False", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "dhcp_enabled" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "dhcp_enabled"
INFO:dicttoxml:Looping inside convert_dict(): key="lacp", val="{u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lacp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lacp"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}"
INFO:dicttoxml:Looping inside convert_dict(): key="rate", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "rate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "rate"
INFO:dicttoxml:Inside convert_kv(): key="rate", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "rate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "rate"
INFO:dicttoxml:Looping inside convert_dict(): key="bypass", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "bypass" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "bypass"
INFO:dicttoxml:Inside convert_kv(): key="bypass", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "bypass" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "bypass"
INFO:dicttoxml:Looping inside convert_dict(): key="partner_mac", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "partner_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "partner_mac"
INFO:dicttoxml:Inside convert_kv(): key="partner_mac", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "partner_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "partner_mac"
INFO:dicttoxml:Looping inside convert_dict(): key="sys_priority", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "sys_priority" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "sys_priority"
INFO:dicttoxml:Inside convert_kv(): key="sys_priority", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "sys_priority" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "sys_priority"
INFO:dicttoxml:Looping inside convert_dict(): key="mac", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mac"
INFO:dicttoxml:Inside convert_kv(): key="mac", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mac"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan_filtering", val="False", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_filtering" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_filtering"
INFO:dicttoxml:Inside convert_kv(): key="vlan_filtering", val="False", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_filtering" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_filtering"
INFO:dicttoxml:Looping inside convert_dict(): key="min_links", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "min_links" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "min_links"
INFO:dicttoxml:Inside convert_kv(): key="min_links", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "min_links" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "min_links"
INFO:dicttoxml:Looping inside convert_dict(): key="ip_neighbors", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_neighbors" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_neighbors"
INFO:dicttoxml:Inside convert_none(): key="ip_neighbors"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_neighbors" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_neighbors"
INFO:dicttoxml:Looping inside convert_dict(): key="mtu", val="1472", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mtu" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mtu"
INFO:dicttoxml:Inside convert_kv(): key="mtu", val="1472", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mtu" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mtu"
INFO:dicttoxml:Looping inside convert_dict(): key="members", val="{}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "members" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "members"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{}"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan_list", val="[]", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_list" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_list"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_dict(): key="counters", val="{u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 1472, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'ORU', u'RX_DRP': 0}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "counters" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "counters"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 1472, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'ORU', u'RX_DRP': 0}"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_ERR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_ERR"
INFO:dicttoxml:Inside convert_kv(): key="RX_ERR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_ERR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_ERR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_ERR"
INFO:dicttoxml:Inside convert_kv(): key="TX_ERR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_ERR"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_OVR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OVR"
INFO:dicttoxml:Inside convert_kv(): key="RX_OVR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OVR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_OVR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OVR"
INFO:dicttoxml:Inside convert_kv(): key="TX_OVR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OVR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_OK", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OK"
INFO:dicttoxml:Inside convert_kv(): key="TX_OK", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OK"
INFO:dicttoxml:Looping inside convert_dict(): key="MTU", val="1472", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "MTU" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MTU"
INFO:dicttoxml:Inside convert_kv(): key="MTU", val="1472", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "MTU" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MTU"
INFO:dicttoxml:Looping inside convert_dict(): key="Met", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Met" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Met"
INFO:dicttoxml:Inside convert_kv(): key="Met", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Met" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Met"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_OK", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OK"
INFO:dicttoxml:Inside convert_kv(): key="RX_OK", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OK"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_DRP", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_DRP"
INFO:dicttoxml:Inside convert_kv(): key="TX_DRP", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_DRP"
INFO:dicttoxml:Looping inside convert_dict(): key="Flg", val="ORU", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Flg" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Flg"
INFO:dicttoxml:Inside convert_kv(): key="Flg", val="ORU", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Flg" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Flg"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_DRP", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_DRP"
INFO:dicttoxml:Inside convert_kv(): key="RX_DRP", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_DRP"
INFO:dicttoxml:Looping inside convert_dict(): key="linkstate", val="UP", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "linkstate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "linkstate"
INFO:dicttoxml:Inside convert_kv(): key="linkstate", val="UP", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "linkstate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "linkstate"
INFO:dicttoxml:Looping inside convert_dict(): key="summary", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "summary" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "summary"
INFO:dicttoxml:Inside convert_kv(): key="summary", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "summary" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "summary"
INFO:dicttoxml:Looping inside convert_dict(): key="connector_type", val="Unknown", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "connector_type" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "connector_type"
INFO:dicttoxml:Inside convert_kv(): key="connector_type", val="Unknown", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "connector_type" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "connector_type"
INFO:dicttoxml:Looping inside convert_dict(): key="mode", val="Default", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mode" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mode"
INFO:dicttoxml:Inside convert_kv(): key="mode", val="Default", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mode" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mode"
INFO:dicttoxml:Looping inside convert_dict(): key="speed", val="N/A", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "speed" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "speed"
INFO:dicttoxml:Inside convert_kv(): key="speed", val="N/A", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "speed" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "speed"
INFO:dicttoxml:Looping inside convert_dict(): key="lo", val="{u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'127.0.0.1/8', u'::1/128']}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:00:00:00:00:00', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 65536, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 65536, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'LRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'IP: 127.0.0.1/8, ::1/128', u'connector_type': u'Unknown', u'mode': u'Loopback', u'speed': u'N/A'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lo" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lo"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'iface_obj': {u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'127.0.0.1/8', u'::1/128']}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:00:00:00:00:00', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 65536, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 65536, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'LRU', u'RX_DRP': 0}}, u'linkstate': u'UP', u'summary': u'IP: 127.0.0.1/8, ::1/128', u'connector_type': u'Unknown', u'mode': u'Loopback', u'speed': u'N/A'}"
INFO:dicttoxml:Looping inside convert_dict(): key="iface_obj", val="{u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'127.0.0.1/8', u'::1/128']}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:00:00:00:00:00', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 65536, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 65536, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'LRU', u'RX_DRP': 0}}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "iface_obj" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "iface_obj"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'lldp': None, u'native_vlan': None, u'description': u'', u'ip_address': {u'allentries': [u'127.0.0.1/8', u'::1/128']}, u'vlan': None, u'asic': None, u'dhcp_enabled': False, u'lacp': {u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}, u'mac': u'00:00:00:00:00:00', u'vlan_filtering': False, u'min_links': u'', u'ip_neighbors': None, u'mtu': 65536, u'members': {}, u'vlan_list': [], u'counters': {u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 65536, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'LRU', u'RX_DRP': 0}}"
INFO:dicttoxml:Looping inside convert_dict(): key="lldp", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lldp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lldp"
INFO:dicttoxml:Inside convert_none(): key="lldp"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lldp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lldp"
INFO:dicttoxml:Looping inside convert_dict(): key="native_vlan", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "native_vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "native_vlan"
INFO:dicttoxml:Inside convert_none(): key="native_vlan"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "native_vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "native_vlan"
INFO:dicttoxml:Looping inside convert_dict(): key="description", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "description"
INFO:dicttoxml:Inside convert_kv(): key="description", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "description"
INFO:dicttoxml:Looping inside convert_dict(): key="ip_address", val="{u'allentries': [u'127.0.0.1/8', u'::1/128']}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_address" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_address"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'allentries': [u'127.0.0.1/8', u'::1/128']}"
INFO:dicttoxml:Looping inside convert_dict(): key="allentries", val="[u'127.0.0.1/8', u'::1/128']", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "allentries" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "allentries"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_list(): item="127.0.0.1/8", item_name="item", type="unicode"
INFO:dicttoxml:Inside convert_kv(): key="item", val="127.0.0.1/8", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "item" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "item"
INFO:dicttoxml:Looping inside convert_list(): item="::1/128", item_name="item", type="unicode"
INFO:dicttoxml:Inside convert_kv(): key="item", val="::1/128", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "item" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "item"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan"
INFO:dicttoxml:Inside convert_none(): key="vlan"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan"
INFO:dicttoxml:Looping inside convert_dict(): key="asic", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "asic" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "asic"
INFO:dicttoxml:Inside convert_none(): key="asic"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "asic" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "asic"
INFO:dicttoxml:Looping inside convert_dict(): key="dhcp_enabled", val="False", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "dhcp_enabled" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "dhcp_enabled"
INFO:dicttoxml:Inside convert_kv(): key="dhcp_enabled", val="False", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "dhcp_enabled" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "dhcp_enabled"
INFO:dicttoxml:Looping inside convert_dict(): key="lacp", val="{u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lacp" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lacp"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'rate': u'', u'bypass': u'', u'partner_mac': u'', u'sys_priority': u''}"
INFO:dicttoxml:Looping inside convert_dict(): key="rate", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "rate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "rate"
INFO:dicttoxml:Inside convert_kv(): key="rate", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "rate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "rate"
INFO:dicttoxml:Looping inside convert_dict(): key="bypass", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "bypass" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "bypass"
INFO:dicttoxml:Inside convert_kv(): key="bypass", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "bypass" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "bypass"
INFO:dicttoxml:Looping inside convert_dict(): key="partner_mac", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "partner_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "partner_mac"
INFO:dicttoxml:Inside convert_kv(): key="partner_mac", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "partner_mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "partner_mac"
INFO:dicttoxml:Looping inside convert_dict(): key="sys_priority", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "sys_priority" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "sys_priority"
INFO:dicttoxml:Inside convert_kv(): key="sys_priority", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "sys_priority" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "sys_priority"
INFO:dicttoxml:Looping inside convert_dict(): key="mac", val="00:00:00:00:00:00", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mac"
INFO:dicttoxml:Inside convert_kv(): key="mac", val="00:00:00:00:00:00", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mac" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mac"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan_filtering", val="False", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_filtering" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_filtering"
INFO:dicttoxml:Inside convert_kv(): key="vlan_filtering", val="False", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_filtering" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_filtering"
INFO:dicttoxml:Looping inside convert_dict(): key="min_links", val="", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "min_links" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "min_links"
INFO:dicttoxml:Inside convert_kv(): key="min_links", val="", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "min_links" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "min_links"
INFO:dicttoxml:Looping inside convert_dict(): key="ip_neighbors", val="None", type(val)="NoneType"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_neighbors" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_neighbors"
INFO:dicttoxml:Inside convert_none(): key="ip_neighbors"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "ip_neighbors" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "ip_neighbors"
INFO:dicttoxml:Looping inside convert_dict(): key="mtu", val="65536", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mtu" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mtu"
INFO:dicttoxml:Inside convert_kv(): key="mtu", val="65536", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mtu" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mtu"
INFO:dicttoxml:Looping inside convert_dict(): key="members", val="{}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "members" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "members"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{}"
INFO:dicttoxml:Looping inside convert_dict(): key="vlan_list", val="[]", type(val)="list"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vlan_list" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vlan_list"
INFO:dicttoxml:Inside convert_list()
INFO:dicttoxml:Looping inside convert_dict(): key="counters", val="{u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 65536, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'LRU', u'RX_DRP': 0}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "counters" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "counters"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'RX_ERR': 0, u'TX_ERR': 0, u'RX_OVR': 0, u'TX_OVR': 0, u'TX_OK': 0, u'MTU': 65536, u'Met': 0, u'RX_OK': 0, u'TX_DRP': 0, u'Flg': u'LRU', u'RX_DRP': 0}"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_ERR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_ERR"
INFO:dicttoxml:Inside convert_kv(): key="RX_ERR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_ERR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_ERR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_ERR"
INFO:dicttoxml:Inside convert_kv(): key="TX_ERR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_ERR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_ERR"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_OVR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OVR"
INFO:dicttoxml:Inside convert_kv(): key="RX_OVR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OVR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_OVR", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OVR"
INFO:dicttoxml:Inside convert_kv(): key="TX_OVR", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OVR" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OVR"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_OK", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OK"
INFO:dicttoxml:Inside convert_kv(): key="TX_OK", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_OK"
INFO:dicttoxml:Looping inside convert_dict(): key="MTU", val="65536", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "MTU" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MTU"
INFO:dicttoxml:Inside convert_kv(): key="MTU", val="65536", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "MTU" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MTU"
INFO:dicttoxml:Looping inside convert_dict(): key="Met", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Met" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Met"
INFO:dicttoxml:Inside convert_kv(): key="Met", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Met" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Met"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_OK", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OK"
INFO:dicttoxml:Inside convert_kv(): key="RX_OK", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_OK" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_OK"
INFO:dicttoxml:Looping inside convert_dict(): key="TX_DRP", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_DRP"
INFO:dicttoxml:Inside convert_kv(): key="TX_DRP", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "TX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "TX_DRP"
INFO:dicttoxml:Looping inside convert_dict(): key="Flg", val="LRU", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Flg" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Flg"
INFO:dicttoxml:Inside convert_kv(): key="Flg", val="LRU", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Flg" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Flg"
INFO:dicttoxml:Looping inside convert_dict(): key="RX_DRP", val="0", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_DRP"
INFO:dicttoxml:Inside convert_kv(): key="RX_DRP", val="0", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "RX_DRP" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "RX_DRP"
INFO:dicttoxml:Looping inside convert_dict(): key="linkstate", val="UP", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "linkstate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "linkstate"
INFO:dicttoxml:Inside convert_kv(): key="linkstate", val="UP", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "linkstate" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "linkstate"
INFO:dicttoxml:Looping inside convert_dict(): key="summary", val="IP: 127.0.0.1/8, ::1/128", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "summary" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "summary"
INFO:dicttoxml:Inside convert_kv(): key="summary", val="IP: 127.0.0.1/8, ::1/128", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "summary" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "summary"
INFO:dicttoxml:Looping inside convert_dict(): key="connector_type", val="Unknown", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "connector_type" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "connector_type"
INFO:dicttoxml:Inside convert_kv(): key="connector_type", val="Unknown", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "connector_type" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "connector_type"
INFO:dicttoxml:Looping inside convert_dict(): key="mode", val="Loopback", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mode" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mode"
INFO:dicttoxml:Inside convert_kv(): key="mode", val="Loopback", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "mode" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "mode"
INFO:dicttoxml:Looping inside convert_dict(): key="speed", val="N/A", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "speed" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "speed"
INFO:dicttoxml:Inside convert_kv(): key="speed", val="N/A", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "speed" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "speed"
ERROR:root:Only candidate datastore is accepted as target element in get-config operation. Target : {urn:ietf:params:xml:ns:netconf:base:1.0}running
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7f0a5290e650>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7fcee2ab4750>: ('::ffff:192.168.50.1', 49493, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0xe23fb710L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 49493, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
ERROR:root:Only candidate datastore is accepted as target element in edit-config operation. Target : {urn:ietf:params:xml:ns:netconf:base:1.0}running
ERROR:root:Unknown element under config in edit-config operation : {urn:ietf:params:xml:ns:netconf:base:1.0}cmds
ERROR:root:Commands missing under config
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7fcee356d650>
INFO:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 49493, 0, 0)): Got channel as None not active so exiting
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f6c4c9b8750>: ('::ffff:192.168.50.1', 49504, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x4c2ff710L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 49504, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
ERROR:root:Commands missing under config
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7f6c4d471650>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7fe73733e750>: ('::ffff:192.168.50.1', 49510, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x36c85710L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 49510, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
ERROR:root:Commands missing under config
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7fe737df7650>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f6d84da4750>: ('::ffff:192.168.50.1', 49514, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x846eb710L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 49514, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7f6d8585d650>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7fb3587aa750>: ('::ffff:192.168.50.1', 49588, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x580f1690L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 49588, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7fb3592635d0>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7ffbd217d750>: ('::ffff:192.168.50.1', 49602, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0xd1ac4690L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 49602, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7ffbd2c365d0>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f2994237750>: ('::ffff:192.168.50.1', 49613, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x93b7e690L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 49613, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7f2994cf05d0>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f9b6c314750>: ('::ffff:192.168.50.1', 49728, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x6bc5b690L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 49728, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
ERROR:root:Error while executing command in edit-config operation : net add interface swp1 access 103. Error : ERROR: Command not found.

    net add interface swp1 access 103
                           ^ Invalid value here.

Use "net help KEYWORD(s)" to list all options that use KEYWORD(s).
 Rolling back.....
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7f9b6cdcd5d0>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f2b4d8b3750>: ('::ffff:192.168.50.1', 49744, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x4d1fa690L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 49744, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
ERROR:root:Error while executing command in edit-config operation : net add interface swp1 access 103. Error : ERROR: Command not found.

    net add interface swp1 access 103
                           ^ Invalid value here.

Use "net help KEYWORD(s)" to list all options that use KEYWORD(s).
 Rolling back.....
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7f2b4e36c5d0>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7fe39adff750>: ('::ffff:192.168.50.1', 49765, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x9a747690L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 49765, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
ERROR:root:Error while executing command in edit-config operation : net add interface swp1 access 103. Error : ERROR: Command not found.

    net add interface swp1 access 103
                           ^ Invalid value here.

Use "net help KEYWORD(s)" to list all options that use KEYWORD(s).
 Rolling back.....
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7fe39b8b95d0>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7febf1ff2750>: ('::ffff:192.168.50.1', 49831, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0xf193a690L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 49831, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7febf2aac5d0>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f9777274750>: ('::ffff:192.168.50.1', 49870, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x76bbc690L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 49870, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
ERROR:root:Value of source element missing
ERROR:root:Only candidate datastore is accepted as source element in validate operation. Source : {urn:ietf:params:xml:ns:netconf:base:1.0}running
ERROR:root:Value of source element missing
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7fa51f462830>: ('::ffff:192.168.50.1', 63511, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0x1eda2c50L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 63511, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
ERROR:root:Value of source element missing
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7fa51edbc250>
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f760cc84830>: ('::ffff:192.168.50.1', 58140, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0xc5c4c50L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-Ganymed Build_250
INFO:paramiko.transport:Connected (version 2.0, client Ganymed)
DEBUG:paramiko.transport:kex algos:[u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] server encrypt:[u'aes256-ctr', u'aes192-ctr', u'aes128-ctr', u'blowfish-ctr', u'aes256-cbc', u'aes192-cbc', u'aes128-cbc', u'blowfish-cbc', u'3des-ctr', u'3des-cbc'] client mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] server mac:[u'hmac-sha1-96', u'hmac-sha1', u'hmac-md5-96', u'hmac-md5'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: diffie-hellman-group14-sha1
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes256-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha1-96
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexGroup14 specified hash_algo <built-in function openssl_sha1>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.50.1', 58140, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=none) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth rejected (none).
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 33976 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:EOF in transport thread
DEBUG:netconf.base:NetconfServerSession(sid:1): Session channel closed [session_open == True]: <netconf.base.NetconfFramingTransport object at 0x7f760c5de950>
