DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f3dfdc36c90>: ('::ffff:192.168.10.1', 47710, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0xfd74e310L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-paramiko_2.6.0
INFO:paramiko.transport:Connected (version 2.0, client paramiko_2.6.0)
DEBUG:paramiko.transport:kex algos:[u'curve25519-sha256@libssh.org', u'ecdh-sha2-nistp256', u'ecdh-sha2-nistp384', u'ecdh-sha2-nistp521', u'diffie-hellman-group16-sha512', u'diffie-hellman-group-exchange-sha256', u'diffie-hellman-group14-sha256', u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-ed25519', u'ecdsa-sha2-nistp256', u'ecdsa-sha2-nistp384', u'ecdsa-sha2-nistp521', u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes128-ctr', u'aes192-ctr', u'aes256-ctr', u'aes128-cbc', u'aes192-cbc', u'aes256-cbc', u'blowfish-cbc', u'3des-cbc'] server encrypt:[u'aes128-ctr', u'aes192-ctr', u'aes256-ctr', u'aes128-cbc', u'aes192-cbc', u'aes256-cbc', u'blowfish-cbc', u'3des-cbc'] client mac:[u'hmac-sha2-256', u'hmac-sha2-512', u'hmac-sha2-256-etm@openssh.com', u'hmac-sha2-512-etm@openssh.com', u'hmac-sha1', u'hmac-md5', u'hmac-sha1-96', u'hmac-md5-96'] server mac:[u'hmac-sha2-256', u'hmac-sha2-512', u'hmac-sha2-256-etm@openssh.com', u'hmac-sha2-512-etm@openssh.com', u'hmac-sha1', u'hmac-md5', u'hmac-sha1-96', u'hmac-md5-96'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: curve25519-sha256@libssh.org
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes128-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha2-256
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexCurve25519 specified hash_algo <built-in function openssl_sha256>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.10.1', 47710, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 32768 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:[chan 0] EOF sent (0)
ERROR:paramiko.transport:Socket exception: Connection reset by peer (104)
INFO:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.10.1', 47710, 0, 0)): Got channel as None not active so exiting
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f3dfdc36d70>: ('::ffff:192.168.10.1', 47712, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0xfd4d2a90L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-paramiko_2.6.0
INFO:paramiko.transport:Connected (version 2.0, client paramiko_2.6.0)
DEBUG:paramiko.transport:kex algos:[u'curve25519-sha256@libssh.org', u'ecdh-sha2-nistp256', u'ecdh-sha2-nistp384', u'ecdh-sha2-nistp521', u'diffie-hellman-group16-sha512', u'diffie-hellman-group-exchange-sha256', u'diffie-hellman-group14-sha256', u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-ed25519', u'ecdsa-sha2-nistp256', u'ecdsa-sha2-nistp384', u'ecdsa-sha2-nistp521', u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes128-ctr', u'aes192-ctr', u'aes256-ctr', u'aes128-cbc', u'aes192-cbc', u'aes256-cbc', u'blowfish-cbc', u'3des-cbc'] server encrypt:[u'aes128-ctr', u'aes192-ctr', u'aes256-ctr', u'aes128-cbc', u'aes192-cbc', u'aes256-cbc', u'blowfish-cbc', u'3des-cbc'] client mac:[u'hmac-sha2-256', u'hmac-sha2-512', u'hmac-sha2-256-etm@openssh.com', u'hmac-sha2-512-etm@openssh.com', u'hmac-sha1', u'hmac-md5', u'hmac-sha1-96', u'hmac-md5-96'] server mac:[u'hmac-sha2-256', u'hmac-sha2-512', u'hmac-sha2-256-etm@openssh.com', u'hmac-sha2-512-etm@openssh.com', u'hmac-sha1', u'hmac-md5', u'hmac-sha1-96', u'hmac-md5-96'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: curve25519-sha256@libssh.org
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes128-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha2-256
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexCurve25519 specified hash_algo <built-in function openssl_sha256>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.10.1', 47712, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 32768 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
INFO:dicttoxml:Inside dicttoxml(): type(obj) is: "dict", obj="{u'memory': 951136, u'uptime': u'0:37:46.270000', u'hostname': u'cumulus', u'platform': {u'detected': True, u'vendor': u'Cumulus', u'model': u'VX'}, u'build': u'Cumulus Linux 3.7.10', u'os-version': u'3.7.10', u'disk': u'6G', u'lsb-release': u'DISTRIB_ID="Cumulus Linux"\nDISTRIB_RELEASE=3.7.10\nDISTRIB_DESCRIPTION="Cumulus Linux 3.7.10"\n', u'os-description': u'Cumulus Linux 3.7.10', u'eeprom': {u'idString': u'TlvInfo', u'totalLength': 70, u'version': 1, u'tlv': {u'Part Number': {u'index': 36, u'length': 6, u'code': u'0x22', u'value': u'3.7.10'}, u'CRC-32': {u'index': 75, u'length': 4, u'code': u'0xFE', u'value': u'0x66B44B2D'}, u'Device Version': {u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}, u'Serial Number': {u'index': 56, u'length': 17, u'code': u'0x23', u'value': u'0c:4b:f2:84:73:00'}, u'Product Name': {u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}, u'MAC Addresses': {u'index': 44, u'length': 2, u'code': u'0x2A', u'value': u'5'}, u'Base MAC Address': {u'index': 48, u'length': 6, u'code': u'0x24', u'value': u'0C:4B:F2:84:73:00'}, u'Vendor Name': {u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}}, u'validTlvInfoHeader': True}}"
INFO:dicttoxml:Inside convert(). obj type is: "dict", obj="{u'memory': 951136, u'uptime': u'0:37:46.270000', u'hostname': u'cumulus', u'platform': {u'detected': True, u'vendor': u'Cumulus', u'model': u'VX'}, u'build': u'Cumulus Linux 3.7.10', u'os-version': u'3.7.10', u'disk': u'6G', u'lsb-release': u'DISTRIB_ID="Cumulus Linux"\nDISTRIB_RELEASE=3.7.10\nDISTRIB_DESCRIPTION="Cumulus Linux 3.7.10"\n', u'os-description': u'Cumulus Linux 3.7.10', u'eeprom': {u'idString': u'TlvInfo', u'totalLength': 70, u'version': 1, u'tlv': {u'Part Number': {u'index': 36, u'length': 6, u'code': u'0x22', u'value': u'3.7.10'}, u'CRC-32': {u'index': 75, u'length': 4, u'code': u'0xFE', u'value': u'0x66B44B2D'}, u'Device Version': {u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}, u'Serial Number': {u'index': 56, u'length': 17, u'code': u'0x23', u'value': u'0c:4b:f2:84:73:00'}, u'Product Name': {u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}, u'MAC Addresses': {u'index': 44, u'length': 2, u'code': u'0x2A', u'value': u'5'}, u'Base MAC Address': {u'index': 48, u'length': 6, u'code': u'0x24', u'value': u'0C:4B:F2:84:73:00'}, u'Vendor Name': {u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}}, u'validTlvInfoHeader': True}}"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'memory': 951136, u'uptime': u'0:37:46.270000', u'hostname': u'cumulus', u'platform': {u'detected': True, u'vendor': u'Cumulus', u'model': u'VX'}, u'build': u'Cumulus Linux 3.7.10', u'os-version': u'3.7.10', u'disk': u'6G', u'lsb-release': u'DISTRIB_ID="Cumulus Linux"\nDISTRIB_RELEASE=3.7.10\nDISTRIB_DESCRIPTION="Cumulus Linux 3.7.10"\n', u'os-description': u'Cumulus Linux 3.7.10', u'eeprom': {u'idString': u'TlvInfo', u'totalLength': 70, u'version': 1, u'tlv': {u'Part Number': {u'index': 36, u'length': 6, u'code': u'0x22', u'value': u'3.7.10'}, u'CRC-32': {u'index': 75, u'length': 4, u'code': u'0xFE', u'value': u'0x66B44B2D'}, u'Device Version': {u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}, u'Serial Number': {u'index': 56, u'length': 17, u'code': u'0x23', u'value': u'0c:4b:f2:84:73:00'}, u'Product Name': {u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}, u'MAC Addresses': {u'index': 44, u'length': 2, u'code': u'0x2A', u'value': u'5'}, u'Base MAC Address': {u'index': 48, u'length': 6, u'code': u'0x24', u'value': u'0C:4B:F2:84:73:00'}, u'Vendor Name': {u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}}, u'validTlvInfoHeader': True}}"
INFO:dicttoxml:Looping inside convert_dict(): key="memory", val="951136", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "memory" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "memory"
INFO:dicttoxml:Inside convert_kv(): key="memory", val="951136", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "memory" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "memory"
INFO:dicttoxml:Looping inside convert_dict(): key="uptime", val="0:37:46.270000", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "uptime" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "uptime"
INFO:dicttoxml:Inside convert_kv(): key="uptime", val="0:37:46.270000", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "uptime" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "uptime"
INFO:dicttoxml:Looping inside convert_dict(): key="hostname", val="cumulus", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "hostname" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "hostname"
INFO:dicttoxml:Inside convert_kv(): key="hostname", val="cumulus", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "hostname" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "hostname"
INFO:dicttoxml:Looping inside convert_dict(): key="platform", val="{u'detected': True, u'vendor': u'Cumulus', u'model': u'VX'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "platform" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "platform"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'detected': True, u'vendor': u'Cumulus', u'model': u'VX'}"
INFO:dicttoxml:Looping inside convert_dict(): key="detected", val="True", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "detected" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "detected"
INFO:dicttoxml:Inside convert_kv(): key="detected", val="True", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "detected" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "detected"
INFO:dicttoxml:Looping inside convert_dict(): key="vendor", val="Cumulus", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vendor" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vendor"
INFO:dicttoxml:Inside convert_kv(): key="vendor", val="Cumulus", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "vendor" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "vendor"
INFO:dicttoxml:Looping inside convert_dict(): key="model", val="VX", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "model" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "model"
INFO:dicttoxml:Inside convert_kv(): key="model", val="VX", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "model" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "model"
INFO:dicttoxml:Looping inside convert_dict(): key="build", val="Cumulus Linux 3.7.10", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "build" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "build"
INFO:dicttoxml:Inside convert_kv(): key="build", val="Cumulus Linux 3.7.10", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "build" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "build"
INFO:dicttoxml:Looping inside convert_dict(): key="os-version", val="3.7.10", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "os-version" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "os-version"
INFO:dicttoxml:Inside convert_kv(): key="os-version", val="3.7.10", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "os-version" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "os-version"
INFO:dicttoxml:Looping inside convert_dict(): key="disk", val="6G", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "disk" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "disk"
INFO:dicttoxml:Inside convert_kv(): key="disk", val="6G", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "disk" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "disk"
INFO:dicttoxml:Looping inside convert_dict(): key="lsb-release", val="DISTRIB_ID="Cumulus Linux"
DISTRIB_RELEASE=3.7.10
DISTRIB_DESCRIPTION="Cumulus Linux 3.7.10"
", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lsb-release" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lsb-release"
INFO:dicttoxml:Inside convert_kv(): key="lsb-release", val="DISTRIB_ID="Cumulus Linux"
DISTRIB_RELEASE=3.7.10
DISTRIB_DESCRIPTION="Cumulus Linux 3.7.10"
", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "lsb-release" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "lsb-release"
INFO:dicttoxml:Looping inside convert_dict(): key="os-description", val="Cumulus Linux 3.7.10", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "os-description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "os-description"
INFO:dicttoxml:Inside convert_kv(): key="os-description", val="Cumulus Linux 3.7.10", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "os-description" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "os-description"
INFO:dicttoxml:Looping inside convert_dict(): key="eeprom", val="{u'idString': u'TlvInfo', u'totalLength': 70, u'version': 1, u'tlv': {u'Part Number': {u'index': 36, u'length': 6, u'code': u'0x22', u'value': u'3.7.10'}, u'CRC-32': {u'index': 75, u'length': 4, u'code': u'0xFE', u'value': u'0x66B44B2D'}, u'Device Version': {u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}, u'Serial Number': {u'index': 56, u'length': 17, u'code': u'0x23', u'value': u'0c:4b:f2:84:73:00'}, u'Product Name': {u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}, u'MAC Addresses': {u'index': 44, u'length': 2, u'code': u'0x2A', u'value': u'5'}, u'Base MAC Address': {u'index': 48, u'length': 6, u'code': u'0x24', u'value': u'0C:4B:F2:84:73:00'}, u'Vendor Name': {u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}}, u'validTlvInfoHeader': True}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "eeprom" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "eeprom"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'idString': u'TlvInfo', u'totalLength': 70, u'version': 1, u'tlv': {u'Part Number': {u'index': 36, u'length': 6, u'code': u'0x22', u'value': u'3.7.10'}, u'CRC-32': {u'index': 75, u'length': 4, u'code': u'0xFE', u'value': u'0x66B44B2D'}, u'Device Version': {u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}, u'Serial Number': {u'index': 56, u'length': 17, u'code': u'0x23', u'value': u'0c:4b:f2:84:73:00'}, u'Product Name': {u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}, u'MAC Addresses': {u'index': 44, u'length': 2, u'code': u'0x2A', u'value': u'5'}, u'Base MAC Address': {u'index': 48, u'length': 6, u'code': u'0x24', u'value': u'0C:4B:F2:84:73:00'}, u'Vendor Name': {u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}}, u'validTlvInfoHeader': True}"
INFO:dicttoxml:Looping inside convert_dict(): key="idString", val="TlvInfo", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "idString" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "idString"
INFO:dicttoxml:Inside convert_kv(): key="idString", val="TlvInfo", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "idString" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "idString"
INFO:dicttoxml:Looping inside convert_dict(): key="totalLength", val="70", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "totalLength" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "totalLength"
INFO:dicttoxml:Inside convert_kv(): key="totalLength", val="70", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "totalLength" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "totalLength"
INFO:dicttoxml:Looping inside convert_dict(): key="version", val="1", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "version" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "version"
INFO:dicttoxml:Inside convert_kv(): key="version", val="1", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "version" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "version"
INFO:dicttoxml:Looping inside convert_dict(): key="tlv", val="{u'Part Number': {u'index': 36, u'length': 6, u'code': u'0x22', u'value': u'3.7.10'}, u'CRC-32': {u'index': 75, u'length': 4, u'code': u'0xFE', u'value': u'0x66B44B2D'}, u'Device Version': {u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}, u'Serial Number': {u'index': 56, u'length': 17, u'code': u'0x23', u'value': u'0c:4b:f2:84:73:00'}, u'Product Name': {u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}, u'MAC Addresses': {u'index': 44, u'length': 2, u'code': u'0x2A', u'value': u'5'}, u'Base MAC Address': {u'index': 48, u'length': 6, u'code': u'0x24', u'value': u'0C:4B:F2:84:73:00'}, u'Vendor Name': {u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "tlv" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "tlv"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'Part Number': {u'index': 36, u'length': 6, u'code': u'0x22', u'value': u'3.7.10'}, u'CRC-32': {u'index': 75, u'length': 4, u'code': u'0xFE', u'value': u'0x66B44B2D'}, u'Device Version': {u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}, u'Serial Number': {u'index': 56, u'length': 17, u'code': u'0x23', u'value': u'0c:4b:f2:84:73:00'}, u'Product Name': {u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}, u'MAC Addresses': {u'index': 44, u'length': 2, u'code': u'0x2A', u'value': u'5'}, u'Base MAC Address': {u'index': 48, u'length': 6, u'code': u'0x24', u'value': u'0C:4B:F2:84:73:00'}, u'Vendor Name': {u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}}"
INFO:dicttoxml:Looping inside convert_dict(): key="Part Number", val="{u'index': 36, u'length': 6, u'code': u'0x22', u'value': u'3.7.10'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Part Number" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Part Number"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Part_Number"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'index': 36, u'length': 6, u'code': u'0x22', u'value': u'3.7.10'}"
INFO:dicttoxml:Looping inside convert_dict(): key="index", val="36", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Inside convert_kv(): key="index", val="36", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Looping inside convert_dict(): key="length", val="6", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Inside convert_kv(): key="length", val="6", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Looping inside convert_dict(): key="code", val="0x22", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Inside convert_kv(): key="code", val="0x22", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Looping inside convert_dict(): key="value", val="3.7.10", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Inside convert_kv(): key="value", val="3.7.10", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Looping inside convert_dict(): key="CRC-32", val="{u'index': 75, u'length': 4, u'code': u'0xFE', u'value': u'0x66B44B2D'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "CRC-32" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "CRC-32"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'index': 75, u'length': 4, u'code': u'0xFE', u'value': u'0x66B44B2D'}"
INFO:dicttoxml:Looping inside convert_dict(): key="index", val="75", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Inside convert_kv(): key="index", val="75", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Looping inside convert_dict(): key="length", val="4", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Inside convert_kv(): key="length", val="4", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Looping inside convert_dict(): key="code", val="0xFE", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Inside convert_kv(): key="code", val="0xFE", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Looping inside convert_dict(): key="value", val="0x66B44B2D", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Inside convert_kv(): key="value", val="0x66B44B2D", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Looping inside convert_dict(): key="Device Version", val="{u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Device Version" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Device Version"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Device_Version"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'index': 33, u'length': 1, u'code': u'0x26', u'value': u'3'}"
INFO:dicttoxml:Looping inside convert_dict(): key="index", val="33", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Inside convert_kv(): key="index", val="33", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Looping inside convert_dict(): key="length", val="1", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Inside convert_kv(): key="length", val="1", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Looping inside convert_dict(): key="code", val="0x26", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Inside convert_kv(): key="code", val="0x26", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Looping inside convert_dict(): key="value", val="3", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Inside convert_kv(): key="value", val="3", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Looping inside convert_dict(): key="Serial Number", val="{u'index': 56, u'length': 17, u'code': u'0x23', u'value': u'0c:4b:f2:84:73:00'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Serial Number" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Serial Number"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Serial_Number"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'index': 56, u'length': 17, u'code': u'0x23', u'value': u'0c:4b:f2:84:73:00'}"
INFO:dicttoxml:Looping inside convert_dict(): key="index", val="56", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Inside convert_kv(): key="index", val="56", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Looping inside convert_dict(): key="length", val="17", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Inside convert_kv(): key="length", val="17", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Looping inside convert_dict(): key="code", val="0x23", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Inside convert_kv(): key="code", val="0x23", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Looping inside convert_dict(): key="value", val="0c:4b:f2:84:73:00", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Inside convert_kv(): key="value", val="0c:4b:f2:84:73:00", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Looping inside convert_dict(): key="Product Name", val="{u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Product Name" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Product Name"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Product_Name"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'index': 29, u'length': 2, u'code': u'0x21', u'value': u'VX'}"
INFO:dicttoxml:Looping inside convert_dict(): key="index", val="29", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Inside convert_kv(): key="index", val="29", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Looping inside convert_dict(): key="length", val="2", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Inside convert_kv(): key="length", val="2", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Looping inside convert_dict(): key="code", val="0x21", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Inside convert_kv(): key="code", val="0x21", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Looping inside convert_dict(): key="value", val="VX", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Inside convert_kv(): key="value", val="VX", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Looping inside convert_dict(): key="MAC Addresses", val="{u'index': 44, u'length': 2, u'code': u'0x2A', u'value': u'5'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "MAC Addresses" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MAC Addresses"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "MAC_Addresses"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'index': 44, u'length': 2, u'code': u'0x2A', u'value': u'5'}"
INFO:dicttoxml:Looping inside convert_dict(): key="index", val="44", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Inside convert_kv(): key="index", val="44", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Looping inside convert_dict(): key="length", val="2", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Inside convert_kv(): key="length", val="2", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Looping inside convert_dict(): key="code", val="0x2A", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Inside convert_kv(): key="code", val="0x2A", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Looping inside convert_dict(): key="value", val="5", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Inside convert_kv(): key="value", val="5", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Looping inside convert_dict(): key="Base MAC Address", val="{u'index': 48, u'length': 6, u'code': u'0x24', u'value': u'0C:4B:F2:84:73:00'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Base MAC Address" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Base MAC Address"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Base_MAC_Address"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'index': 48, u'length': 6, u'code': u'0x24', u'value': u'0C:4B:F2:84:73:00'}"
INFO:dicttoxml:Looping inside convert_dict(): key="index", val="48", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Inside convert_kv(): key="index", val="48", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Looping inside convert_dict(): key="length", val="6", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Inside convert_kv(): key="length", val="6", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Looping inside convert_dict(): key="code", val="0x24", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Inside convert_kv(): key="code", val="0x24", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Looping inside convert_dict(): key="value", val="0C:4B:F2:84:73:00", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Inside convert_kv(): key="value", val="0C:4B:F2:84:73:00", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Looping inside convert_dict(): key="Vendor Name", val="{u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}", type(val)="dict"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "Vendor Name" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Vendor Name"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "Vendor_Name"
INFO:dicttoxml:Inside convert_dict(): obj type is: "dict", obj="{u'index': 11, u'length': 16, u'code': u'0x2D', u'value': u'Cumulus Networks'}"
INFO:dicttoxml:Looping inside convert_dict(): key="index", val="11", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Inside convert_kv(): key="index", val="11", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "index" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "index"
INFO:dicttoxml:Looping inside convert_dict(): key="length", val="16", type(val)="int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Inside convert_kv(): key="length", val="16", type(val) is: "int"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "length" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "length"
INFO:dicttoxml:Looping inside convert_dict(): key="code", val="0x2D", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Inside convert_kv(): key="code", val="0x2D", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "code" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "code"
INFO:dicttoxml:Looping inside convert_dict(): key="value", val="Cumulus Networks", type(val)="unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Inside convert_kv(): key="value", val="Cumulus Networks", type(val) is: "unicode"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "value" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "value"
INFO:dicttoxml:Looping inside convert_dict(): key="validTlvInfoHeader", val="True", type(val)="bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "validTlvInfoHeader" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "validTlvInfoHeader"
INFO:dicttoxml:Inside convert_kv(): key="validTlvInfoHeader", val="True", type(val) is: "bool"
INFO:dicttoxml:Inside make_valid_xml_name(). Testing key "validTlvInfoHeader" with attr "{}"
INFO:dicttoxml:Inside key_is_valid_xml(). Testing "validTlvInfoHeader"
DEBUG:paramiko.transport:[chan 0] EOF sent (0)
ERROR:paramiko.transport:Socket exception: Connection reset by peer (104)
INFO:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.10.1', 47712, 0, 0)): Got channel as None not active so exiting
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f3dfc48d590>: ('::ffff:192.168.10.1', 47714, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0xfd4fc490L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-paramiko_2.6.0
INFO:paramiko.transport:Connected (version 2.0, client paramiko_2.6.0)
DEBUG:paramiko.transport:kex algos:[u'curve25519-sha256@libssh.org', u'ecdh-sha2-nistp256', u'ecdh-sha2-nistp384', u'ecdh-sha2-nistp521', u'diffie-hellman-group16-sha512', u'diffie-hellman-group-exchange-sha256', u'diffie-hellman-group14-sha256', u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-ed25519', u'ecdsa-sha2-nistp256', u'ecdsa-sha2-nistp384', u'ecdsa-sha2-nistp521', u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes128-ctr', u'aes192-ctr', u'aes256-ctr', u'aes128-cbc', u'aes192-cbc', u'aes256-cbc', u'blowfish-cbc', u'3des-cbc'] server encrypt:[u'aes128-ctr', u'aes192-ctr', u'aes256-ctr', u'aes128-cbc', u'aes192-cbc', u'aes256-cbc', u'blowfish-cbc', u'3des-cbc'] client mac:[u'hmac-sha2-256', u'hmac-sha2-512', u'hmac-sha2-256-etm@openssh.com', u'hmac-sha2-512-etm@openssh.com', u'hmac-sha1', u'hmac-md5', u'hmac-sha1-96', u'hmac-md5-96'] server mac:[u'hmac-sha2-256', u'hmac-sha2-512', u'hmac-sha2-256-etm@openssh.com', u'hmac-sha2-512-etm@openssh.com', u'hmac-sha1', u'hmac-md5', u'hmac-sha1-96', u'hmac-md5-96'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: curve25519-sha256@libssh.org
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes128-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha2-256
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexCurve25519 specified hash_algo <built-in function openssl_sha256>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.10.1', 47714, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 32768 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:[chan 0] EOF sent (0)
ERROR:paramiko.transport:Socket exception: Connection reset by peer (104)
INFO:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.10.1', 47714, 0, 0)): Got channel as None not active so exiting
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f3dfc48d670>: ('::ffff:192.168.10.1', 47716, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0xfc497910L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-paramiko_2.6.0
INFO:paramiko.transport:Connected (version 2.0, client paramiko_2.6.0)
DEBUG:paramiko.transport:kex algos:[u'curve25519-sha256@libssh.org', u'ecdh-sha2-nistp256', u'ecdh-sha2-nistp384', u'ecdh-sha2-nistp521', u'diffie-hellman-group16-sha512', u'diffie-hellman-group-exchange-sha256', u'diffie-hellman-group14-sha256', u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-ed25519', u'ecdsa-sha2-nistp256', u'ecdsa-sha2-nistp384', u'ecdsa-sha2-nistp521', u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes128-ctr', u'aes192-ctr', u'aes256-ctr', u'aes128-cbc', u'aes192-cbc', u'aes256-cbc', u'blowfish-cbc', u'3des-cbc'] server encrypt:[u'aes128-ctr', u'aes192-ctr', u'aes256-ctr', u'aes128-cbc', u'aes192-cbc', u'aes256-cbc', u'blowfish-cbc', u'3des-cbc'] client mac:[u'hmac-sha2-256', u'hmac-sha2-512', u'hmac-sha2-256-etm@openssh.com', u'hmac-sha2-512-etm@openssh.com', u'hmac-sha1', u'hmac-md5', u'hmac-sha1-96', u'hmac-md5-96'] server mac:[u'hmac-sha2-256', u'hmac-sha2-512', u'hmac-sha2-256-etm@openssh.com', u'hmac-sha2-512-etm@openssh.com', u'hmac-sha1', u'hmac-md5', u'hmac-sha1-96', u'hmac-md5-96'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: curve25519-sha256@libssh.org
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes128-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha2-256
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexCurve25519 specified hash_algo <built-in function openssl_sha256>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.10.1', 47716, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 32768 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:[chan 0] EOF sent (0)
ERROR:paramiko.transport:Socket exception: Connection reset by peer (104)
INFO:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.10.1', 47716, 0, 0)): Got channel as None not active so exiting
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f3dfc48d600>: ('::ffff:192.168.10.1', 47718, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0xfc4bea10L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-paramiko_2.6.0
INFO:paramiko.transport:Connected (version 2.0, client paramiko_2.6.0)
DEBUG:paramiko.transport:kex algos:[u'curve25519-sha256@libssh.org', u'ecdh-sha2-nistp256', u'ecdh-sha2-nistp384', u'ecdh-sha2-nistp521', u'diffie-hellman-group16-sha512', u'diffie-hellman-group-exchange-sha256', u'diffie-hellman-group14-sha256', u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-ed25519', u'ecdsa-sha2-nistp256', u'ecdsa-sha2-nistp384', u'ecdsa-sha2-nistp521', u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes128-ctr', u'aes192-ctr', u'aes256-ctr', u'aes128-cbc', u'aes192-cbc', u'aes256-cbc', u'blowfish-cbc', u'3des-cbc'] server encrypt:[u'aes128-ctr', u'aes192-ctr', u'aes256-ctr', u'aes128-cbc', u'aes192-cbc', u'aes256-cbc', u'blowfish-cbc', u'3des-cbc'] client mac:[u'hmac-sha2-256', u'hmac-sha2-512', u'hmac-sha2-256-etm@openssh.com', u'hmac-sha2-512-etm@openssh.com', u'hmac-sha1', u'hmac-md5', u'hmac-sha1-96', u'hmac-md5-96'] server mac:[u'hmac-sha2-256', u'hmac-sha2-512', u'hmac-sha2-256-etm@openssh.com', u'hmac-sha2-512-etm@openssh.com', u'hmac-sha1', u'hmac-md5', u'hmac-sha1-96', u'hmac-md5-96'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: curve25519-sha256@libssh.org
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes128-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha2-256
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexCurve25519 specified hash_algo <built-in function openssl_sha256>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.10.1', 47718, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 32768 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:[chan 0] EOF sent (0)
ERROR:paramiko.transport:Socket exception: Connection reset by peer (104)
INFO:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.10.1', 47718, 0, 0)): Got channel as None not active so exiting
DEBUG:sshutil.server:NetconfSSHServer(port=8300): Client accepted: <socket._socketobject object at 0x7f3dfc48d750>: ('::ffff:192.168.10.1', 47720, 0, 0)
DEBUG:paramiko.transport:starting thread (server mode): 0xfc012bd0L
DEBUG:paramiko.transport:Local version/idstring: SSH-2.0-paramiko_2.6.0
DEBUG:paramiko.transport:Remote version/idstring: SSH-2.0-paramiko_2.6.0
INFO:paramiko.transport:Connected (version 2.0, client paramiko_2.6.0)
DEBUG:paramiko.transport:kex algos:[u'curve25519-sha256@libssh.org', u'ecdh-sha2-nistp256', u'ecdh-sha2-nistp384', u'ecdh-sha2-nistp521', u'diffie-hellman-group16-sha512', u'diffie-hellman-group-exchange-sha256', u'diffie-hellman-group14-sha256', u'diffie-hellman-group-exchange-sha1', u'diffie-hellman-group14-sha1', u'diffie-hellman-group1-sha1'] server key:[u'ssh-ed25519', u'ecdsa-sha2-nistp256', u'ecdsa-sha2-nistp384', u'ecdsa-sha2-nistp521', u'ssh-rsa', u'ssh-dss'] client encrypt:[u'aes128-ctr', u'aes192-ctr', u'aes256-ctr', u'aes128-cbc', u'aes192-cbc', u'aes256-cbc', u'blowfish-cbc', u'3des-cbc'] server encrypt:[u'aes128-ctr', u'aes192-ctr', u'aes256-ctr', u'aes128-cbc', u'aes192-cbc', u'aes256-cbc', u'blowfish-cbc', u'3des-cbc'] client mac:[u'hmac-sha2-256', u'hmac-sha2-512', u'hmac-sha2-256-etm@openssh.com', u'hmac-sha2-512-etm@openssh.com', u'hmac-sha1', u'hmac-md5', u'hmac-sha1-96', u'hmac-md5-96'] server mac:[u'hmac-sha2-256', u'hmac-sha2-512', u'hmac-sha2-256-etm@openssh.com', u'hmac-sha2-512-etm@openssh.com', u'hmac-sha1', u'hmac-md5', u'hmac-sha1-96', u'hmac-md5-96'] client compress:[u'none'] server compress:[u'none'] client lang:[u''] server lang:[u''] kex follows?False
DEBUG:paramiko.transport:Kex agreed: curve25519-sha256@libssh.org
DEBUG:paramiko.transport:HostKey agreed: ssh-rsa
DEBUG:paramiko.transport:Cipher agreed: aes128-ctr
DEBUG:paramiko.transport:MAC agreed: hmac-sha2-256
DEBUG:paramiko.transport:Compression agreed: none
DEBUG:paramiko.transport:kex engine KexCurve25519 specified hash_algo <built-in function openssl_sha256>
DEBUG:paramiko.transport:Switch to new keys ...
DEBUG:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.10.1', 47720, 0, 0)): Accepting channel connections
DEBUG:paramiko.transport:Auth request (type=password) service=ssh-connection, username=admin
INFO:paramiko.transport:Auth granted (password).
DEBUG:paramiko.transport:[chan 0] Max packet in: 32768 bytes
DEBUG:paramiko.transport:[chan 0] Max packet out: 32768 bytes
DEBUG:paramiko.transport:Secsh channel 0 (session) opened.
DEBUG:paramiko.transport:[chan 0] EOF sent (0)
ERROR:paramiko.transport:Socket exception: Connection reset by peer (104)
INFO:sshutil.server:SSHServerSocket(client: ('::ffff:192.168.10.1', 47720, 0, 0)): Got channel as None not active so exiting
